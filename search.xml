<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dgl_学习记录</title>
      <link href="/2022/03/13/dgl-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/03/13/dgl-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-图"><a href="#第一章-图" class="headerlink" title="第一章 图"></a>第一章 图</h1><p><strong>本文是<a href="https://docs.dgl.ai/en/0.8.x/guide_cn/">dgl官方文档阅读记录</a>。</strong></p><h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h2><h2 id="1-2-图、节点和边"><a href="#1-2-图、节点和边" class="headerlink" title="1.2 图、节点和边"></a>1.2 图、节点和边</h2><p>如果想创建一个上面这样的图，需要创建两个表示边的<code>tensor</code>，然后调用<code>dgl.graph()</code>方法。这两个tensor分别是源节点和目标节点的ID：<a href="https://docs.dgl.ai/en/0.8.x/guide_cn/graph-graphs-nodes-edges.html">参考官方文档</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> dglu <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>v <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>g <span class="token operator">=</span> dgl<span class="token punctuation">.</span>graph<span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-节点和边的特征"><a href="#1-3-节点和边的特征" class="headerlink" title="1.3 节点和边的特征"></a>1.3 节点和边的特征</h2><p>可以通过<code>DGLGraph</code>的<code>ndata</code>和<code>edata</code>接口访问图的具名特征：（假设图<code>g</code>已经创建）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">g<span class="token punctuation">.</span>ndata<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span><span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>g<span class="token punctuation">.</span>num_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>g<span class="token punctuation">.</span>edata<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>g<span class="token punctuation">.</span>num_edges<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h2><h2 id="1-5"><a href="#1-5" class="headerlink" title="1.5"></a>1.5</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 图神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shutil模块</title>
      <link href="/2022/03/13/shutil%E6%A8%A1%E5%9D%97/"/>
      <url>/2022/03/13/shutil%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="shutil-copyfile-src-des"><a href="#shutil-copyfile-src-des" class="headerlink" title="shutil.copyfile(src,des)"></a><code>shutil.copyfile(src,des)</code></h2><p>   从<code>src</code>拷贝文件到<code>des</code>。且<code>des</code>目录里不能有未创建的文件夹。关键部分源码：</p>   <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#....</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fsrc<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fdst<span class="token punctuation">:</span>   <span class="token comment">#....</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   可以看到，这函数调用<code>open()</code>方法，打开了两个文件，完成复制。</p><h2 id="shutil-copytree-src-dst-dirs-exist-ok-False"><a href="#shutil-copytree-src-dst-dirs-exist-ok-False" class="headerlink" title="shutil.copytree(src, dst,dirs_exist_ok=False)"></a><code>shutil.copytree(src, dst,dirs_exist_ok=False)</code></h2><p>   递归式拷贝<code>src</code>文件树到<code>dst</code>中。若<code>dirs_exist_ok=True</code>，那么如果<code>dst</code>中已经存在某些文件，则会跳过复制而不报错。反之亦然。</p><h2 id="shutil-make-archive-quot-archive-quot-quot-zip-quot-quot-quot"><a href="#shutil-make-archive-quot-archive-quot-quot-zip-quot-quot-quot" class="headerlink" title="shutil.make_archive(&quot;archive&quot;,&quot;zip&quot;,&quot;.&quot;)"></a><code>shutil.make_archive(&quot;archive&quot;,&quot;zip&quot;,&quot;.&quot;)</code></h2><p>   这里直接上例子了。上面这句作用是将当前目录下文件打包成压缩包，并返回压缩包的全路径。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python库 </tag>
            
            <tag> Python </tag>
            
            <tag> 文件处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PySide2学习记录1</title>
      <link href="/2022/03/12/PySide2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/"/>
      <url>/2022/03/12/PySide2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</url>
      
        <content type="html"><![CDATA[<h1 id="简单实现：打开一个窗口"><a href="#简单实现：打开一个窗口" class="headerlink" title="简单实现：打开一个窗口"></a>简单实现：打开一个窗口</h1><pre class="line-numbers language-pytho" data-language="pytho"><code class="language-pytho">from PySide2.QtWidgets import QApplication, QMainWindowapp &#x3D; QApplication([])window &#x3D; QMainWindow()window.show()app.exec_()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码的效果为：</p><p>其中，<code>app</code>为控整个GUI程序的“管理者”。在初始化任何窗体之前，都应该先初始它。且它有一个<code>exec_()</code>方法。这个方法是继承自父类的，功能是进入GUI的事件处理循环。如果没有这句，窗口会一闪而过。继承关系如下：</p><h1 id="按钮、slot、signal"><a href="#按钮、slot、signal" class="headerlink" title="按钮、slot、signal"></a>按钮、slot、signal</h1><p>控件被操作之后，会发送一个<strong>signal</strong>，可以指定一个函数去处理这个<strong>signal</strong>。这个函数大约就是<strong>slot</strong>了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QMainWindow<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QMessageBox<span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 初始化窗口</span>        self<span class="token punctuation">.</span>window <span class="token operator">=</span> QMainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 在window上放置一个button</span>        self<span class="token punctuation">.</span>button <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"提交"</span><span class="token punctuation">,</span>parent<span class="token operator">=</span>self<span class="token punctuation">.</span>window<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button_handler<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">button_handler</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 按钮点积信号的处理函数(slot)</span>        QMessageBox<span class="token punctuation">.</span>about<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>window<span class="token punctuation">,</span>            <span class="token string">"按钮提交反馈"</span><span class="token punctuation">,</span>            <span class="token string">"您刚才点击了按钮！"</span>        <span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>    https<span class="token punctuation">:</span><span class="token operator">//</span>doc<span class="token punctuation">.</span>qt<span class="token punctuation">.</span>io<span class="token operator">/</span>qt<span class="token operator">-</span><span class="token number">6</span><span class="token operator">/</span>qabstractbutton<span class="token punctuation">.</span>html<span class="token comment">#signals</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的执行结果为：</p><p><a href="https://doc.qt.io/qt-6/qabstractbutton.html#signals">这里有</a><code>QAbstractButton</code>的全部<strong>signal</strong>。</p><h1 id="使用Qt-Designer"><a href="#使用Qt-Designer" class="headerlink" title="使用Qt Designer"></a>使用Qt Designer</h1><p>手动调整控件的位置无疑是枯燥的。Qt库提供了一个工具，叫designer，可以用拖拽的方式先调整好GUI各个控件的大体位置。这个软件被安装在了虚拟环境的Scripts目录下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">D:\software\Anaconda\envs\tf2\Scripts\pyside2-designer.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用这个软件设计好界面后，将*.ui文件保存，然后在代码中加载它：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtUiTools <span class="token keyword">import</span> QUiLoader<span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 加载ui配置文件</span>        self<span class="token punctuation">.</span>ui <span class="token operator">=</span> QUiLoader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"ui/postman.ui"</span><span class="token punctuation">)</span>        <span class="token comment"># 显示窗体</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Python库 </tag>
            
            <tag> Python </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git设置</title>
      <link href="/2022/03/12/git%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/03/12/git%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="git-clone下载太慢"><a href="#git-clone下载太慢" class="headerlink" title="git clone下载太慢"></a>git clone下载太慢</h1><p>可以配置git 使用socket5 代理 ，如使用SSR（地址为socks5h:&#x2F;&#x2F;127.0.0.1:1080）：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global http.proxy &#39;socks5h:&#x2F;&#x2F;127.0.0.1:1080&#39;git config --global https.proxy &#39;socks5h:&#x2F;&#x2F;127.0.0.1:1080&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="git-配置-ssh秘钥"><a href="#git-配置-ssh秘钥" class="headerlink" title="git 配置 ssh秘钥"></a>git 配置 ssh秘钥</h1><p><a href="https://gitee.com/help/articles/4181">Gitee上</a>有生成秘钥的教程。</p><p><strong>步骤：</strong></p><p>先执行生成指令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh-keygen -t ed25519 -C &quot;anchor2019@outlook.com&quot;  # Generating public&#x2F;private ed25519 key pair...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行后，会在<code>~/.ssh/</code>目录下生成以下两个文件：</p><p>可以使用<code>cat</code>执行查看公钥，并将公钥信息填在Gitee设置中：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat ~&#x2F;.ssh&#x2F;id_ed25519.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加后，可以测试是否成功：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh -T git@gitee.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 翻墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powershell</title>
      <link href="/2022/03/12/powershell/"/>
      <url>/2022/03/12/powershell/</url>
      
        <content type="html"><![CDATA[<h1 id="一行代码执行多条命令"><a href="#一行代码执行多条命令" class="headerlink" title="一行代码执行多条命令"></a>一行代码执行多条命令</h1><p>用<strong>分号</strong>实现。</p><p>如，重启hexo服务器：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">hexo clean <span class="token punctuation">;</span> hexo g <span class="token punctuation">;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/2022/03/12/Hexo/"/>
      <url>/2022/03/12/Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="记录创建博客时遇到的命令"><a href="#记录创建博客时遇到的命令" class="headerlink" title="记录创建博客时遇到的命令"></a>记录创建博客时遇到的命令</h1><ol><li><p>创建新文章</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo n &quot;作品名&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>介绍</title>
      <link href="/2022/03/12/%E6%80%BB%E8%BF%B0%E6%96%87%E7%AB%A0/"/>
      <url>/2022/03/12/%E6%80%BB%E8%BF%B0%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来访！祝你每天都有个好心情"><a href="#欢迎来访！祝你每天都有个好心情" class="headerlink" title="欢迎来访！祝你每天都有个好心情~"></a>欢迎来访！祝你每天都有个好心情~</h1>]]></content>
      
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
