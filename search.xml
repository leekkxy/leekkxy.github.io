<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>spring-mvc</title>
      <link href="/2022/03/17/spring-mvc/"/>
      <url>/2022/03/17/spring-mvc/</url>
      
        <content type="html"><![CDATA[<h1 id="1-方法参数绑定注解"><a href="#1-方法参数绑定注解" class="headerlink" title="1.方法参数绑定注解"></a>1.方法参数绑定注解</h1><h2 id="1-获取路径变量"><a href="#1-获取路径变量" class="headerlink" title="1. 获取路径变量"></a>1. 获取路径变量</h2><p>参考<a href="#">Post not found: servlet</a>。本节的注解仅是为了简化servlet中的获取参数的操作。</p><p>使用<code>@PathVariable</code>注解可以获取请求参数的值；若修饰一个<code>Map</code>，则这个<code>Map</code>中封装了所有的参数。</p><p>如：在Controller中写如下的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test/&#123;id&#125;/&#123;name&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span>                      <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                      <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> kv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"name + id is"</span> <span class="token operator">+</span> name <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", kv is: "</span> <span class="token operator">+</span> kv<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后访问<a href="http://localhost/test/1/tom">http://localhost/test/1/tom</a>  ，结果为：</p><p> name + id istom1, kv is: {id&#x3D;1, name&#x3D;tom} </p><h2 id="2-获取请求头的信息"><a href="#2-获取请求头的信息" class="headerlink" title="2.获取请求头的信息"></a>2.获取请求头的信息</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> map<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>访问结果：</p><pre class="line-numbers language-none"><code class="language-none">&#123;&quot;host&quot;:&quot;localhost&quot;,&quot;connection&quot;:&quot;keep-alive&quot;,&quot;sec-ch-ua&quot;:&quot;\&quot; Not A;Brand\&quot;;v&#x3D;\&quot;99\&quot;, \&quot;Chromium\&quot;;v&#x3D;\&quot;99\&quot;, \&quot;Google Chrome\&quot;;v&#x3D;\&quot;99\&quot;&quot;,&quot;sec-ch-ua-mobile&quot;:&quot;?0&quot;,&quot;sec-ch-ua-platform&quot;:&quot;\&quot;Windows\&quot;&quot;,&quot;upgrade-insecure-requests&quot;:&quot;1&quot;,&quot;user-agent&quot;:&quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;99.0.4844.51 Safari&#x2F;537.36&quot;,&quot;accept&quot;:&quot;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9&quot;,&quot;sec-fetch-site&quot;:&quot;none&quot;,&quot;sec-fetch-mode&quot;:&quot;navigate&quot;,&quot;sec-fetch-user&quot;:&quot;?1&quot;,&quot;sec-fetch-dest&quot;:&quot;document&quot;,&quot;accept-encoding&quot;:&quot;gzip, deflate, br&quot;,&quot;accept-language&quot;:&quot;zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,de;q&#x3D;0.7&quot;,&quot;cookie&quot;:&quot;Pycharm-1da915d2&#x3D;0dcad91b-6a2c-457d-929a-943e3b9cd0a1; _xsrf&#x3D;2|f2bc7967|f22b983ed32ce7fa85f3cbd0a6084fb6|1646542986; username-localhost-8888&#x3D;\&quot;2|1:0|10:1646543091|23:username-localhost-8888|44:ZmFhNDFkNGY5MmNlNGQxOGFkZmE2ODkxYTY5YjM0NmY&#x3D;|9c3a42c7c99f39198302d6e50c928f379b679943623d9c8ced083c410bff05cd\&quot;; __gads&#x3D;ID&#x3D;75241bc55e091837-224d1dc1f4d000fa:T&#x3D;1647069864:RT&#x3D;1647069864:S&#x3D;ALNI_MbeOfxerPs_r8icT7p6GKFI1ckTiA; username-localhost-8889&#x3D;\&quot;2|1:0|10:1647178600|23:username-localhost-8889|44:ODM5OTQ3MWEwNTk2NDE1Zjg3ZmYzZWM1NzkxYTJmNzg&#x3D;|2088e3ea0638389db060487f14c6f5e6a114ddb83067cff0137b0e12016ecfed\&quot;&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-获取url中的参数"><a href="#3-获取url中的参数" class="headerlink" title="3.获取url中的参数"></a>3.获取url中的参数</h2><p>前面的路径变量是url问号之前的部分。如：</p><p>localhost:user&#x2F;1&#x2F;tom?age&#x3D;20</p><p>这个url中，user、1、tom都是路径变量；而age&#x3D;20是参数。需要用<code>@RequestParam</code>注解获取。</p><p>文档中说：</p><blockquote><p>You can use the <code>@RequestParam</code> annotation to bind Servlet request parameters (that is, query parameters or form data) to a method argument in a controller.</p></blockquote><p>即：这是query parameter。</p><h2 id="4-其他的参数绑定的注解"><a href="#4-其他的参数绑定的注解" class="headerlink" title="4.其他的参数绑定的注解"></a>4.其他的参数绑定的注解</h2><p>点开注解所在的包，发现有如下的其他注解：</p><p><img src="C:\Users\LLKK\AppData\Roaming\Typora\typora-user-images\1647491764054.png" alt="其他方法参数绑定的注解"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spring </tag>
            
            <tag> spring-mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring web源码阅读记录</title>
      <link href="/2022/03/17/spring-web%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/03/17/spring-web%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-HiddenHttpMethodFilter"><a href="#1-HiddenHttpMethodFilter" class="headerlink" title="1. HiddenHttpMethodFilter"></a>1. HiddenHttpMethodFilter</h1><h2 id="1-类的代码"><a href="#1-类的代码" class="headerlink" title="1.类的代码"></a>1.类的代码</h2><p>作用：是个过滤器。将表单中的请求转换成REST风格请求；将表单中仅支持的get和post方法扩展到所有的http方法（包括put、delete等）。</p><p>下面仅看一下这个类中的<code>doFilterInternal</code>方法。它首先判断当前请求是否为POST(且请求参数中没有错误），然后获取请求参数中，<code>this.methodParam</code>键对应的值。而这个键就是<code>&quot;_method&quot;</code>。在表单中就是<code>&lt;input name=&quot;_method&quot; value=&quot;delete&quot; type=&quot;hidden&quot;/&gt;</code>这里的键和值。然后判断这个值（即http方法名，在上面的value中）是否为空，若不空，则将其转化成大写，然后判断这方法是否为允许的方法。允许的方法在<code>ALLOWED_METHODS</code>字段中，包括三项：<code>put,delete,patch</code>。 最后，它创建了一个<code>HttpMethodRequestWrapper</code>。这个类是一个内部类，参见下一个的代码框：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HiddenHttpMethodFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ALLOWED_METHODS <span class="token operator">=</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>PUT<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>DELETE<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>PATCH<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** Default method parameter: &#123;@code _method&#125;. */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEFAULT_METHOD_PARAM <span class="token operator">=</span> <span class="token string">"_method"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> methodParam <span class="token operator">=</span> DEFAULT_METHOD_PARAM<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">HttpServletRequest</span> requestToUse <span class="token operator">=</span> request<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span>ERROR_EXCEPTION_ATTRIBUTE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> paramValue <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>methodParam<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>paramValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> method <span class="token operator">=</span> paramValue<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span>ENGLISH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ALLOWED_METHODS<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>requestToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpMethodRequestWrapper</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>requestToUse<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个内部类，它仅覆写了<code>getMethod()</code>方法，将当前<code>request</code> 的方法名改成了目标方法名。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HttpMethodRequestWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServletRequestWrapper</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">HttpMethodRequestWrapper</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-修改methodParam"><a href="#2-修改methodParam" class="headerlink" title="2.修改methodParam"></a>2.修改methodParam</h2><p>要想修改methodParam，可以创建一个配置类，在其中创建一个<code>HiddenHttpMethodFilter</code>对象，这样容器就不使用默认的配置了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebFilterConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">HiddenHttpMethodFilter</span> <span class="token function">hiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HiddenHttpMethodFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setMethodParam</span><span class="token punctuation">(</span><span class="token string">"_m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filter<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段配置类往容器中“丢”了一个<code>HiddenHttpMethodFilter</code>。这使得容器就会使用这个Filter而非默认的。这样就做到修改了methodParam。</p><p>在spring-boot自动配置类中，有如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">HiddenHttpMethodFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mvc.hiddenmethod.filter"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">OrderedHiddenHttpMethodFilter</span> <span class="token function">hiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OrderedHiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里注明了，这个默认的<code>OrderedHiddenHttpMethodFilter</code>的创建是有条件的：比如<code>@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</code>这个条件就是容器中不存在这个类时，才启用自动配置。spring-boot就是靠着一系列的默认的自动配置类，简化了开发。</p><h1 id="2-Dispatcherservlet"><a href="#2-Dispatcherservlet" class="headerlink" title="2.Dispatcherservlet"></a>2.Dispatcherservlet</h1><p>这是SpringMVC的核心。它也是一个Servlet，负责几乎所有的请求分发。</p><p>下面是这个类的一些方法：下面主要分析其<code>doDispatch</code>方法。</p><img src="/2022/03/17/spring-web%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/Dispatcherservlet%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95.png" class="" title="Dispatcherservlet类的方法"><p>这个类并没有实现<code>doGet</code>和<code>doPost</code>等方法，而是在其父类中实现的：</p><img src="/2022/03/17/spring-web%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E7%BB%A7%E6%89%BF%E5%9B%BE.png" class="" title="继承图"><p>在其父类<code>FrameworkServlet</code>中，实现了那几个<code>do**</code>方法。<code>do**</code>方法又会调用<code>doDispatch</code>方法。</p><h2 id="1-例子"><a href="#1-例子" class="headerlink" title="1.例子"></a>1.例子</h2><p>比如说，请求地址是<code>http://localhost/user</code>，同时我们也创建了一个<code>Controller</code>去处理这个URL的请求：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"当前访问路径：/user"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么，这个请求，首先会被Dispatcherservlet处理。它首先从一堆<code>控制器</code>中，找到当前URL对应的映射方法：</p><img src="/2022/03/17/spring-web%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/Dispatcherservlet%E7%9A%84doDispatch%E6%96%B9%E6%B3%95.png" class="" title="Dispatcherservlet的doDispatch方法"><img src="/2022/03/17/spring-web%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/mappedHandler%E5%8D%B3%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95.png" class="" title="mappedHandler即处理方法"><p>可以看到，当前请求路径是<code>http://localhost/user</code>，找到的handler是<code>getUserTest()</code>方法。</p><h2 id="2-如何获取Handler的？"><a href="#2-如何获取Handler的？" class="headerlink" title="2.如何获取Handler的？"></a>2.如何获取Handler的？</h2><h3 id="1-Dispatcherservlet中的处理"><a href="#1-Dispatcherservlet中的处理" class="headerlink" title="1. Dispatcherservlet中的处理"></a>1. Dispatcherservlet中的处理</h3><p>分析上面的<code> getHandler</code>方法，可以得知是如何获取Handler的。下面是源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> <span class="token class-name">HandlerExecutionChain</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerMapping</span> mapping <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">HandlerExecutionChain</span> handler <span class="token operator">=</span> mapping<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> handler<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，做法是遍历<code>this.HandlerMapping</code>，然后看哪个<code>handlerMapping</code>找到匹配当前request的合适的<code>handler</code>。</p><h3 id="2-HandlerMapping中的处理"><a href="#2-HandlerMapping中的处理" class="headerlink" title="2.HandlerMapping中的处理"></a>2.HandlerMapping中的处理</h3><p>这能处理自己写的请求映射的<code>handler</code>真实类型是<code>RequestMappingHandlerMapping</code>。下面是它的继承图：</p><img src="/2022/03/17/spring-web%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/RequestMappingHandlerMapping%E7%BB%A7%E6%89%BF%E5%9B%BE.png" class="" title="RequestMappingHandlerMapping继承图"><p>最终经过一番调用，是在这里找到最佳匹配的handler的：</p><img src="/2022/03/17/spring-web%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E5%8C%B9%E9%85%8Dhandler.png" class="" title="匹配handler"><h2 id="3-如何调用handler的？"><a href="#3-如何调用handler的？" class="headerlink" title="3.如何调用handler的？"></a>3.如何调用handler的？</h2><h3 id="1-寻找Adapter"><a href="#1-寻找Adapter" class="headerlink" title="1.寻找Adapter"></a>1.寻找Adapter</h3><p>找到当前请求对应的Handler之后，就该调用这个Handler了。但是等等，在调用之前，还有一些工作要做，比如这个Handler中的参数，是需要”注入”的。这个“注入”的过程，就是HandlerAdapter的工作。在处理好参数后，HandlerAdapter就会利用反射，调用这个Handler方法。但并不是所有的handler公用一个Adapter的。一共有四个Adapter。DispatcherServlet将所有的Adapter放到HandlerAdapters字段中：</p><img src="/2022/03/17/spring-web%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/HandlerAdapters.png" class="" title="HandlerAdapters"><p>不过我们写的Controller对应的Adapter只有一个，即<code>RequestHandlerMappingAdapter</code>。找到对应的Adapter是通过下面这句实现的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>getHandlerAdapter</code>的源码是：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>DispatcherServlet</span></div><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">HandlerAdapter</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerAdapter</span> adapter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>adapter<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> adapter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它仅是遍历自己所有的Adapter，然后看它是否支持当前的handler，如果支持则返回这个Adapter。<code>adapter.supports</code>的代码如下：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>AbstractHandlerMethodAdapter</span></div><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerMethod</span> <span class="token operator">&amp;&amp;</span> <span class="token function">supportsInternal</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span> handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>它先判断传来的handler是否为<code>HandlerMethod</code>类型，然后再执行判断。<code>supportsInternal</code>方法为：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>RequestMappingHandlerAdapter</span></div><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">supportsInternal</span><span class="token punctuation">(</span><span class="token class-name">HandlerMethod</span> handlerMethod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这个<code>RequestMappingHandlerAdapter</code>类就可以处理当前的handler，因为它的判断方法永远返回<code>true</code>。</p><p>因此，这个<code>RequestMappingHandlerAdapter</code>就作为当前handler的Adapter，被返回到<code>Dispatcherservlet</code>中了。</p><h3 id="2-补充：HandlerAdapter"><a href="#2-补充：HandlerAdapter" class="headerlink" title="2.补充：HandlerAdapter"></a>2.补充：HandlerAdapter</h3><p>前面很HandlerAdapter中的代码。我们再插播一下<code>HandlerAdapter</code>源码。</p><p>这是一个接口，有仨方法：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>HandlerAdapter</span></div><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerAdapter</span> <span class="token punctuation">&#123;</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">ModelAndView</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token function">getLastModified</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中第一个方法是判断当前adapter是否支持当前handler；</p><p>第二个方法是拿着当前的req和resp，去调用handler方法。</p><p>第三个不太重要….</p><h3 id="3-为handler设置Resolver和Handler"><a href="#3-为handler设置Resolver和Handler" class="headerlink" title="3.为handler设置Resolver和Handler"></a>3.为handler设置Resolver和Handler</h3><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>DispatcherServlet</span></div><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">//......</span><span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//.....</span>mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//.....</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在找到了Adapter后，就可以调用Adapter的handle方法了。handle方法主要做了两件事：</p><ul><li><p>为handler设置解析器、处理器。</p></li><li><p>调用handler方法。</p></li></ul><p>上面列出的依然是<code> doDispatch()</code>方法中的片段。这里调用的是<code>handle()</code>方法，这个方法在熟悉的<code>AbstractHandlerMethodAdapter</code>类中被实现了：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>AbstractHandlerMethodAdapter</span></div><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ModelAndView</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">handleInternal</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>handleInternal</code>方法才是真正的处理代码：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>RequestMappingHandlerAdapter</span></div><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">ModelAndView</span> <span class="token function">handleInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">HandlerMethod</span> handlerMethod<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">//.......</span>mav <span class="token operator">=</span> <span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//......</span><span class="token keyword">return</span> mav<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个函数最关键的，就是调用<code>invokeHandlerMethod</code>方法一句。继续看这个方法（只列出了关键的两句）：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>RequestMappingHandlerAdapter</span></div><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> <span class="token class-name">ModelAndView</span> <span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">HandlerMethod</span> handlerMethod<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>invocableMethod<span class="token punctuation">.</span><span class="token function">setHandlerMethodArgumentResolvers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>invocableMethod<span class="token punctuation">.</span><span class="token function">setHandlerMethodReturnValueHandlers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//...</span>invocableMethod<span class="token punctuation">.</span><span class="token function">invokeAndHandle</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> mavContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里它判断<code>this.argumentResolvers</code> 和<code>this.returnValueHandlers</code>是否为空，然后将其设置为handler的字段。这里解析器、处理器用来处理参数映射、返回值映射啥的。debug一下这两个参数的内容：</p><img src="/2022/03/17/spring-web%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E8%BF%94%E5%9B%9E%E5%80%BC%E5%A4%84%E7%90%86%E5%99%A8%E5%92%8C%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8.png" class="" title="返回值处理器和参数解析器"><p>可以看到，参数解析器长度为26。那么我们可以查看一下这是26个什么对象：</p><img src="/2022/03/17/spring-web%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/26%E4%B8%AA%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8.png" class="" title="26个参数解析器"><p>这些名字很熟悉！正是在编写Controller时用到的参数映射的注解！<br>然后看列出的的最后一句<code>invocableMethod.invokeAndHandle(webRequest, mavContainer);</code>，从这里开始调用Method对象的方法了。</p><h3 id="4-HandlerMethod"><a href="#4-HandlerMethod" class="headerlink" title="4.HandlerMethod"></a>4.HandlerMethod</h3><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>ServletInvocableHandlerMethod</span></div><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invokeAndHandle</span><span class="token punctuation">(</span><span class="token class-name">ServletWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> providedArgs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> returnValue <span class="token operator">=</span> <span class="token function">invokeForRequest</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> providedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法接着调，获取了返回值。继续看<code> invokeForRequest</code>方法：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>InvocableHandlerMethod</span></div><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invokeForRequest</span><span class="token punctuation">(</span><span class="token class-name">NativeWebRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> providedArgs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token function">getMethodArgumentValues</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> providedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...</span><span class="token keyword">return</span> <span class="token function">doInvoke</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-获取参数的真值"><a href="#5-获取参数的真值" class="headerlink" title="5.获取参数的真值"></a>5.获取参数的真值</h3><p>这里首先调用<code>getMethodArgumentValues</code>获取参数的真值，然后开始真正的调用。来看下是如何获取所有参数的真值的：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>InvocableHandlerMethod</span></div><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMethodArgumentValues</span><span class="token punctuation">(</span><span class="token class-name">NativeWebRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> providedArgs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">MethodParameter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span> <span class="token function">getMethodParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> EMPTY_ARGS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>parameters<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">MethodParameter</span> parameter <span class="token operator">=</span> parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>parameter<span class="token punctuation">.</span><span class="token function">initParameterNameDiscovery</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parameterNameDiscoverer<span class="token punctuation">)</span><span class="token punctuation">;</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">findProvidedArgument</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> providedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolvers<span class="token punctuation">.</span><span class="token function">supportsParameter</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token function">formatArgumentError</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> <span class="token string">"No suitable resolver"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resolvers<span class="token punctuation">.</span><span class="token function">resolveArgument</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataBinderFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Leave stack trace for later, exception may actually be resolved and handled...</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> exMsg <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>exMsg <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>exMsg<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">getExecutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toGenericString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token function">formatArgumentError</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> exMsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">throw</span> ex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> args<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它首先获取了所有的参数。看一下这所有的参数都有什么：</p><img src="/2022/03/17/spring-web%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E6%89%80%E6%9C%89%E7%9A%84%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8.png" class="" title="所有的参数列表"><p>发现有仨。这是因为，当前请求的路径是<a href="http://localhost/test/1/tom">http://localhost/test/1/tom</a> ，而这个URL的handler是：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>UserController</span></div><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test/&#123;id&#125;/&#123;name&#125;"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span>                         <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                         <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> kv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> <span class="token string">"name + id is"</span> <span class="token operator">+</span> name <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", kv is: "</span> <span class="token operator">+</span> kv<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，所有的参数列表就是这三个参数！</p><p>点开第一个参数，一窥其注解：</p><img src="/2022/03/17/spring-web%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%E5%AF%B9%E8%B1%A1%E4%B8%8A%E7%9A%84%E6%B3%A8%E8%A7%A3%E4%BF%A1%E6%81%AF.png" class="" title="第一个参数对象上的注解信息"><p>可以看到，这里有一个<code>@PathVariable</code>注解信息！这正是Controller代码中写好的。</p><p>这才仅是看了第一句。来往后看：</p><p>首先判断参数列表是否为空，若空则返回空列表；若不空，创建对应长度的参数列表数组：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>InvocableHandlerMethod</span></div><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMethodArgumentValues</span><span class="token punctuation">(</span><span class="token class-name">NativeWebRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> providedArgs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">MethodParameter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span> <span class="token function">getMethodParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> EMPTY_ARGS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>parameters<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//......</span><span class="token keyword">return</span> args<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后遍历参数列表，看当前的解析器是否支持当前参数：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>InvocableHandlerMethod</span></div><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMethodArgumentValues</span><span class="token punctuation">(</span><span class="token class-name">NativeWebRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> providedArgs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">// ......</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">MethodParameter</span> parameter <span class="token operator">=</span> parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// ......</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolvers<span class="token punctuation">.</span><span class="token function">supportsParameter</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token function">formatArgumentError</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> <span class="token string">"No suitable resolver"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ......</span><span class="token keyword">return</span> args<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-解析器判断是否支持当前Parameter"><a href="#6-解析器判断是否支持当前Parameter" class="headerlink" title="6.解析器判断是否支持当前Parameter"></a>6.解析器判断是否支持当前Parameter</h3><p>这里需要插一段解析器的代码，是<code>this.resolvers.supportsParameter(parameter)</code>这一句的：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>HandlerMethodArgumentResolverComposite</span></div><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">getArgumentResolver</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>继续看这函数调用：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>HandlerMethodArgumentResolverComposite</span></div><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">HandlerMethodArgumentResolver</span> <span class="token function">getArgumentResolver</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">HandlerMethodArgumentResolver</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolverCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerMethodArgumentResolver</span> resolver <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>resolver<span class="token punctuation">.</span><span class="token function">supportsParameter</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result <span class="token operator">=</span> resolver<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolverCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这方法首先看缓存里有没有解析器。若没有，再遍历所有（刚才的那26个）解析器，一一查看其是否支持解析当前的参数。若有一个支持的，则也把这个解析器放到缓存，并且返回<code>true</code>。</p><p>继续看循环遍历中的判断<code>resolver.supportsParameter(parameter)</code>是如何实现的：</p><p>这是个遍历的过程，第一个遇到的是<code>RequestParamMethodArgumentResolver</code>类。这个类当然不能解析<code>@PathVariable</code>注解的参数。所以是返回false。不过这不影响我们简单看一下这个类的源码，毕竟debug也不好跳过它（皱眉头）：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>RequestParamMethodArgumentResolver</span></div><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">hasParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RequestParam</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// ......</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">hasParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RequestPart</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// ......</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它判断了下这个参数上是否有<code>RequestParam</code>这个类的注解，然后决定是否支持解析当前参数。所以，这判断逻辑还是挺简单的，就是反射的使用。</p><p>好了，这个方法已经返回<code>false</code>。继续下一次迭代：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>RequestParamMapMethodArgumentResolver</span></div><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">RequestParam</span> requestParam <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RequestParam</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>requestParam <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次是<code>RequestParamMapMethodArgumentResolver</code>解析器。它也是判断是否有相应的注解，并且还有附加条件，都满足才返回<code>true</code>。这也不是我们想要的，所以，进行下一次迭代：</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>PathVariableMethodArgumentResolver</span></div><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parameter<span class="token punctuation">.</span><span class="token function">hasParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">PathVariable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">nestedIfOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNestedParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">PathVariable</span> pathVariable <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">PathVariable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>pathVariable <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>pathVariable<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终于迭代到匹配的解析器了。可以看到，这个判断逻辑还是很粗暴的：如果没有标对应的注解，直接先返回<code>false</code>。然后判断是否有<code>Map</code>类型的参数，这需要额外处理（回想：当标注了<code>Map</code>参数时，其中包含了所有的路径参数信息）。这次实验中，第一个参数并不是<code>Map</code>类型，因此不考虑这一步，方法直接返回<code>true</code>。 </p>]]></content>
      
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> 源码阅读 </tag>
            
            <tag> spring </tag>
            
            <tag> spring-web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring 常用配置</title>
      <link href="/2022/03/17/spring-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/03/17/spring-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-springboot"><a href="#1-springboot" class="headerlink" title="1. springboot"></a>1. springboot</h1><h2 id="1-Initializr"><a href="#1-Initializr" class="headerlink" title="1. Initializr"></a>1. Initializr</h2><p>阿里云网址：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;start.aliyun.com&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spring </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot源码阅读记录</title>
      <link href="/2022/03/17/spring-boot%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/03/17/spring-boot%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spring-boot </tag>
            
            <tag> 源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零碎遇到的单词</title>
      <link href="/2022/03/16/%E9%9B%B6%E7%A2%8E%E9%81%87%E5%88%B0%E7%9A%84%E5%8D%95%E8%AF%8D/"/>
      <url>/2022/03/16/%E9%9B%B6%E7%A2%8E%E9%81%87%E5%88%B0%E7%9A%84%E5%8D%95%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><h2 id="1-antibody-：抗体"><a href="#1-antibody-：抗体" class="headerlink" title="1 antibody ：抗体"></a>1 antibody ：抗体</h2><h2 id="2-dihedral：-两面的"><a href="#2-dihedral：-两面的" class="headerlink" title="2 dihedral： 两面的"></a>2 dihedral： 两面的</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章收藏</title>
      <link href="/2022/03/16/%E6%96%87%E7%AB%A0%E6%94%B6%E8%97%8F/"/>
      <url>/2022/03/16/%E6%96%87%E7%AB%A0%E6%94%B6%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-历年净增人口统计"><a href="#1-历年净增人口统计" class="headerlink" title="1. 历年净增人口统计"></a>1. 历年净增人口统计</h1><p> <img src="https://n.sinaimg.cn/news/crawl/587/w232h1155/20220118/23f8-7eaf2df18ad3490042f24d49217d4b31.jpg" alt="历年净增人口（数据来源：国家统计局数据）"> </p>]]></content>
      
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图数据可视化</title>
      <link href="/2022/03/14/%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2022/03/14/%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="1-PyGraphviz"><a href="#1-PyGraphviz" class="headerlink" title="1. PyGraphviz"></a>1. PyGraphviz</h1><p>要使用这个库，需要先安装<code>graphviz</code>应用程序，并且需要将其放到环境变量中。然后再安装这个库。</p><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>图的绘制</span><a href="https://pygraphviz.github.io/documentation/stable/reference/agraph.html#pygraphviz.AGraph.draw">绘制图</a></div><code class="language-python">g<span class="token operator">=</span>nx<span class="token punctuation">.</span>karate_club_graph<span class="token punctuation">(</span><span class="token punctuation">)</span>g<span class="token operator">=</span>nx<span class="token punctuation">.</span>nx_graph<span class="token punctuation">.</span>to_agraph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># format指定何种格式，如pdf、png; prog指定图的layout</span>g<span class="token punctuation">.</span>draw<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> prog<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#prog有： </span><span class="token punctuation">[</span><span class="token string">"neato"</span><span class="token punctuation">,</span> <span class="token string">"dot"</span><span class="token punctuation">,</span> <span class="token string">"twopi"</span><span class="token punctuation">,</span> <span class="token string">"circo"</span><span class="token punctuation">,</span> <span class="token string">"fdp"</span><span class="token punctuation">,</span> <span class="token string">"nop"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2022/03/14/%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/%E7%94%BB%E5%87%BA%E7%9A%84%E5%9B%BE%E7%A4%BA%E6%84%8F.png" class="" title="画出的图示意">]]></content>
      
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有意思的小玩意</title>
      <link href="/2022/03/14/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%B0%8F%E7%8E%A9%E6%84%8F/"/>
      <url>/2022/03/14/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%B0%8F%E7%8E%A9%E6%84%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-分形法"><a href="#1-分形法" class="headerlink" title="1.分形法"></a>1.分形法</h1><p>在看matplotlib文档时，有个<a href="https://matplotlib.org/stable/gallery/lines_bars_and_markers/fill.html">画雪花</a>的实例，其中的雪花是用分行法计算出来的。</p><p>分形法：将一条线段三等分，然后将每一部分画成一个等边三角形，然后删掉原有的线段。</p><img src="/2022/03/14/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%B0%8F%E7%8E%A9%E6%84%8F/%E5%88%86%E5%BD%A2%E6%B3%95%E5%9B%BE%E7%A4%BA.png" class="" title="分形法图示">]]></content>
      
      
      
        <tags>
            
            <tag> 未分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遇到的错误</title>
      <link href="/2022/03/13/%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2022/03/13/%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Python中的错误"><a href="#1-Python中的错误" class="headerlink" title="1. Python中的错误"></a>1. Python中的错误</h1><h2 id="1-1-os模块"><a href="#1-1-os模块" class="headerlink" title="1.1 os模块"></a>1.1 os模块</h2><p>在用<code>os.system()</code>执行<code>cmd</code>命令时，遇到了错误：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">r'hexo n "新博客"'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其输出是这样的：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">Usage: hexo &lt;command&gt;Commands:  help     Get help on a command.  init     Create a new Hexo folder.  version  Display version information.Global Options:  --config  Specify config file instead of using _config.yml  --cwd     Specify the CWD  --debug   Display all verbose messages in the terminal  --draft   Display draft posts  --safe    Disable all plugins and scripts  --silent  Hide output on console<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搜了下，发现是因为命令中有<strong>空格</strong>。所以想在<code>python</code>中执行<code>cmd</code> 命令，还真不容易啊。</p><h2 id="2-dgl随机游走"><a href="#2-dgl随机游走" class="headerlink" title="2.dgl随机游走"></a>2.dgl随机游走</h2><p>GCC: Graph Contrastive Coding for Graph Neural Network Pre-Training 这篇论文中，用到了“重启随机游走算法”。算法内容是：以一个节点为起点，在图中随机游走。每一步都有一定的概率重新<strong>回到</strong>起点。</p><p>但是DGL库中的实现，是以一定的概率<strong>终止</strong>此次游走。如果这个概率很大，那么游走出来的子图几乎都只有一个节点：因为刚开始就直接终止游走了。</p><p>下面是实验：分别以0.8的重启概率和0.0的重启概率，随机游走”COLLAB”数据集。直方图是游走出的1000个子图的节点个数分布图。</p><img src="/2022/03/13/%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/%E9%9A%8F%E6%9C%BA%E6%B8%B8%E8%B5%B0%E5%AD%90%E5%9B%BE%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0%E5%88%86%E5%B8%83%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class="" title="随机游走子图节点个数分布直方图"><p>从图中可以看到，若重启概率为0.8，则80%的子图大小为1，也即是根本就不游走。如果重启概率设置为0，则子图大小正常，都是11（设置的跳数为10，加上起点，正好11）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dgl<span class="token keyword">from</span> dgl<span class="token punctuation">.</span>data <span class="token keyword">import</span> TUDataset<span class="token keyword">from</span> dgl<span class="token punctuation">.</span>sampling <span class="token keyword">import</span> random_walk<span class="token punctuation">,</span> pack_traces<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">class</span> <span class="token class-name">RwrGraphDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>            self<span class="token punctuation">,</span>            dataset<span class="token operator">=</span><span class="token string">"COLLAB"</span><span class="token punctuation">,</span>            rw_hops<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>            restart_prob<span class="token operator">=</span><span class="token number">0.8</span>    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data_folder <span class="token operator">=</span> <span class="token string">r"G:\Project\Python\step-by-step-gcc\dgl_learning\data"</span>        dataset <span class="token operator">=</span> TUDataset<span class="token punctuation">(</span>            name<span class="token operator">=</span>dataset<span class="token punctuation">,</span>            raw_dir<span class="token operator">=</span>self<span class="token punctuation">.</span>data_folder        <span class="token punctuation">)</span>        graphs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> g <span class="token keyword">in</span> dataset<span class="token punctuation">:</span>            graphs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>graph <span class="token operator">=</span> dgl<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>graphs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>rw_hops <span class="token operator">=</span> rw_hops        self<span class="token punctuation">.</span>length <span class="token operator">=</span> self<span class="token punctuation">.</span>graph<span class="token punctuation">.</span>number_of_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>restart_prob <span class="token operator">=</span> restart_prob    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>length    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        trace <span class="token operator">=</span> random_walk<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>graph<span class="token punctuation">,</span>            nodes<span class="token operator">=</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>            length<span class="token operator">=</span>self<span class="token punctuation">.</span>rw_hops<span class="token punctuation">,</span>            restart_prob<span class="token operator">=</span>self<span class="token punctuation">.</span>restart_prob        <span class="token punctuation">)</span>        trace <span class="token operator">=</span> pack_traces<span class="token punctuation">(</span><span class="token operator">*</span>trace<span class="token punctuation">)</span>        trace <span class="token operator">=</span> trace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># print(trace)</span>        <span class="token keyword">return</span> dgl<span class="token punctuation">.</span>node_subgraph<span class="token punctuation">(</span>self<span class="token punctuation">.</span>graph<span class="token punctuation">,</span> trace<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    dataset <span class="token operator">=</span> RwrGraphDataset<span class="token punctuation">(</span><span class="token punctuation">)</span>    sub_graphs_8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    N <span class="token operator">=</span> <span class="token number">1000</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> d <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> idx <span class="token operator">>=</span> N<span class="token punctuation">:</span>            <span class="token keyword">break</span>        sub_graphs_8<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">.</span>number_of_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dataset<span class="token punctuation">.</span>restart_prob <span class="token operator">=</span> <span class="token number">0</span>    sub_graphs_0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> d <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> idx <span class="token operator">>=</span> N<span class="token punctuation">:</span>            <span class="token keyword">break</span>        sub_graphs_0<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">.</span>number_of_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sub_graphs_0<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sub_graphs_8<span class="token punctuation">)</span>    fig<span class="token punctuation">,</span>axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hist<span class="token punctuation">(</span>sub_graphs_0<span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"restart_prob = 0"</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hist<span class="token punctuation">(</span>sub_graphs_8<span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"restart_prob = 0.8"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-matplotlib"><a href="#3-matplotlib" class="headerlink" title="3.matplotlib"></a>3.matplotlib</h2><h3 id="1-显示中文"><a href="#1-显示中文" class="headerlink" title="1. 显示中文"></a>1. 显示中文</h3><p>如果有中文，需要设置这两句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>  plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>否则会报以下的错，且显示不出来中文：</p><p><img src="C:\Users\LLKK\AppData\Roaming\Typora\typora-user-images\1647232686477.png" alt="显示中文报错"></p>]]></content>
      
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>介绍</title>
      <link href="/2022/03/12/%E6%80%BB%E8%BF%B0%E6%96%87%E7%AB%A0/"/>
      <url>/2022/03/12/%E6%80%BB%E8%BF%B0%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来访！祝你每天都有个好心情"><a href="#欢迎来访！祝你每天都有个好心情" class="headerlink" title="欢迎来访！祝你每天都有个好心情~"></a>欢迎来访！祝你每天都有个好心情~</h1>]]></content>
      
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
