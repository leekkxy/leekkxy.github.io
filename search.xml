<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>numpy</title>
      <link href="/2022/03/13/numpy/"/>
      <url>/2022/03/13/numpy/</url>
      
        <content type="html"><![CDATA[<h2 id="1-random"><a href="#1-random" class="headerlink" title="1.random"></a>1.random</h2><h3 id="1-1-normal"><a href="#1-1-normal" class="headerlink" title="1.1 normal"></a>1.1 normal</h3><p>指定正态分布的均值和方差的随机分布：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plty <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>y<span class="token punctuation">,</span>bins<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：</p><img src="/2022/03/13/numpy/normal%E6%96%B9%E6%B3%95%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E7%9A%84%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class="" title="normal方法生成数据的直方图"><h3 id="1-2-uniform"><a href="#1-2-uniform" class="headerlink" title="1.2 uniform"></a>1.2 uniform</h3><p>顾名思义，是均匀分布：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plty <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>y<span class="token punctuation">,</span>bins<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：</p><img src="/2022/03/13/numpy/uniform%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E7%9A%84%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class="" title="uniform生成数据的直方图">]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib</title>
      <link href="/2022/03/13/matplotlib/"/>
      <url>/2022/03/13/matplotlib/</url>
      
        <content type="html"><![CDATA[<h2 id="1-设置style（绘图风格）"><a href="#1-设置style（绘图风格）" class="headerlink" title="1.设置style（绘图风格）"></a>1.设置style（绘图风格）</h2><p>展示所有可用的风格：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">print</span><span class="token punctuation">(</span>plt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>available<span class="token punctuation">)</span><span class="token comment"># ['Solarize_Light2', '_classic_test_patch', 'bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark', 'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'tableau-colorblind10']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>seaborn风格示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">"seaborn"</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/03/13/matplotlib/seaborn%E9%A3%8E%E6%A0%BC%E7%9A%84plot.png" class="" title="seaborn风格的plot"><h2 id="2-常见图"><a href="#2-常见图" class="headerlink" title="2.常见图"></a>2.常见图</h2><h3 id="2-1-散点图"><a href="#2-1-散点图" class="headerlink" title="2.1 散点图"></a>2.1 散点图</h3><p>效果：</p><img src="/2022/03/13/matplotlib/%E6%95%A3%E7%82%B9%E5%9B%BE.png" class="" title="散点图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>size <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>color <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> s<span class="token operator">=</span>size<span class="token punctuation">,</span> c<span class="token operator">=</span>color<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-柱状图"><a href="#2-2-柱状图" class="headerlink" title="2.2 柱状图"></a>2.2 柱状图</h3><p>效果：</p><img src="/2022/03/13/matplotlib/%E6%9F%B1%E7%8A%B6%E5%9B%BE.png" class="" title="柱状图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>heights <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span> heights<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-1堆叠的柱状图"><a href="#2-2-1堆叠的柱状图" class="headerlink" title="2.2.1堆叠的柱状图"></a>2.2.1堆叠的柱状图</h4><img src="/2022/03/13/matplotlib/%E5%A0%86%E5%8F%A0%E7%9A%84%E6%9F%B1%E7%8A%B6%E5%9B%BE.png" class="" title="堆叠的柱状图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">5</span>menMeans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>womenMeans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>pos <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>n<span class="token punctuation">)</span>p1 <span class="token operator">=</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>pos<span class="token punctuation">,</span> menMeans<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"men"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar_label<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> label_type<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>pos<span class="token punctuation">,</span> womenMeans<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"women"</span><span class="token punctuation">,</span> bottom<span class="token operator">=</span>menMeans<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar_label<span class="token punctuation">(</span>p2<span class="token punctuation">,</span> label_type<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-并列的柱状图"><a href="#2-2-2-并列的柱状图" class="headerlink" title="2.2.2 并列的柱状图"></a>2.2.2 并列的柱状图</h4><img src="/2022/03/13/matplotlib/%E5%B9%B6%E5%88%97%E7%9A%84%E6%9F%B1%E7%8A%B6%E5%9B%BE.png" class="" title="并列的柱状图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">5</span>menMeans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>womenMeans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>pos <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>n<span class="token punctuation">)</span>width <span class="token operator">=</span> <span class="token number">0.35</span>rect1 <span class="token operator">=</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>pos <span class="token operator">-</span> width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> menMeans<span class="token punctuation">,</span> width<span class="token operator">=</span>width<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"men"</span><span class="token punctuation">)</span>rect2 <span class="token operator">=</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>pos <span class="token operator">+</span> width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> womenMeans<span class="token punctuation">,</span> width<span class="token operator">=</span>width<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"women"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar_label<span class="token punctuation">(</span>rect1<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar_label<span class="token punctuation">(</span>rect2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-broken-bar"><a href="#2-2-3-broken-bar" class="headerlink" title="2.2.3 broken_bar"></a>2.2.3 broken_bar</h4><img src="/2022/03/13/matplotlib/broken_bar.png" class="" title="broken_bar"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>xmin_width <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>ymin_height <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token comment"># 意思是，画两个矩形。</span><span class="token comment"># 其中第一个左下角坐标是(10,30),宽高为(20,40)</span><span class="token comment"># 其中第二个左下角坐标是(50,30),宽高为(20,40)</span>plt<span class="token punctuation">.</span>broken_barh<span class="token punctuation">(</span>xmin_width<span class="token punctuation">,</span> ymin_height<span class="token punctuation">)</span><span class="token comment"># 这个矩形左下角坐标是(10,3),宽高为(10,5)</span>plt<span class="token punctuation">.</span>broken_barh<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-棉棒图"><a href="#2-3-棉棒图" class="headerlink" title="2.3 棉棒图"></a>2.3 棉棒图</h3><img src="/2022/03/13/matplotlib/%E6%A3%89%E6%A3%92%E5%9B%BE.png" class="" title="棉棒图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">7</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>heights <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>stem<span class="token punctuation">(</span>x<span class="token punctuation">,</span> heights<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-路径图"><a href="#2-4-路径图" class="headerlink" title="2.4 路径图"></a>2.4 路径图</h3><p>效果：</p><img src="/2022/03/13/matplotlib/%E8%B7%AF%E5%BE%84%E5%9B%BE.png" class="" title="路径图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">7</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>heights <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>step<span class="token punctuation">(</span>x<span class="token punctuation">,</span> heights<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> heights<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-fill-between"><a href="#2-5-fill-between" class="headerlink" title="2.5 fill_between"></a>2.5 fill_between</h3><p>效果：</p><img src="/2022/03/13/matplotlib/fill_between.png" class="" title="fill_between"><p>代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">16</span>k <span class="token operator">=</span> <span class="token number">4</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>y1 <span class="token operator">=</span> k <span class="token operator">*</span> x <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span>y2 <span class="token operator">=</span> k <span class="token operator">*</span> x <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span>plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> y2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-imshow"><a href="#2-6-imshow" class="headerlink" title="2.6 imshow"></a>2.6 imshow</h3><img src="/2022/03/13/matplotlib/z=x+y.png" class="" title="z&#x3D;x+y"><p>代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">20</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>    np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>    np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>z <span class="token operator">=</span> x <span class="token operator">+</span> yplt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>z<span class="token punctuation">,</span>cmap<span class="token operator">=</span><span class="token string">"winter"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-等高线图"><a href="#2-7-等高线图" class="headerlink" title="2.7 等高线图"></a>2.7 等高线图</h3><img src="/2022/03/13/matplotlib/%E7%AD%89%E9%AB%98%E7%BA%BF%E5%9B%BE.png" class="" title="等高线图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">20</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>    np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>    np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>z <span class="token operator">=</span> x <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> y <span class="token operator">**</span> <span class="token number">2</span>plt<span class="token punctuation">.</span>contour<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span>cmap<span class="token operator">=</span><span class="token string">"jet"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-箭头图"><a href="#2-8-箭头图" class="headerlink" title="2.8 箭头图"></a>2.8 箭头图</h3><img src="/2022/03/13/matplotlib/%E7%AE%AD%E5%A4%B4%E5%9B%BE.png" class="" title="箭头图"><p>注：x和y指定位置，u和v指定箭头的方向向量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">10</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>    np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>    np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>u <span class="token operator">=</span> xv <span class="token operator">=</span> yplt<span class="token punctuation">.</span>quiver<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-9-evenplot"><a href="#2-9-evenplot" class="headerlink" title="2.9  evenplot"></a>2.9  evenplot</h3><img src="/2022/03/13/matplotlib/evenplot.png" class="" title="evenplot"><p>这是表示x的分布的。分布多的地方密集（可以创建条形码了:D）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">200</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>eventplot<span class="token punctuation">(</span>x<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-10-饼形图"><a href="#2-10-饼形图" class="headerlink" title="2.10 饼形图"></a>2.10 饼形图</h3><img src="/2022/03/13/matplotlib/%E9%A5%BC%E5%BD%A2%E5%9B%BE.png" class="" title="饼形图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">5000</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>x<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sklearn</title>
      <link href="/2022/03/13/sklearn/"/>
      <url>/2022/03/13/sklearn/</url>
      
        <content type="html"><![CDATA[<h2 id="3-1-交叉验证"><a href="#3-1-交叉验证" class="headerlink" title="3.1 交叉验证"></a>3.1 交叉验证</h2><p>交叉验证中，有“几折”就有几次迭代的验证：</p><img src="https://scikit-learn.org/stable/_images/sphx_glr_plot_cv_indices_006.png" class="[class names]" title="[100] [100] " alt="4折交叉验证，图片来自sklearn文档"><p>最直接的实现类是<code>KFold</code>，其随机地将数据划分为n个fold。下面这段代码将数据随机划分为4折，所以迭代了四次。<code>kf.split()</code>方法返回划分后数据下标，第一个参数是训练集的下标；第二个是验证集的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span>  np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> KFoldX <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span>kf <span class="token operator">=</span> KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>train<span class="token punctuation">,</span> test<span class="token punctuation">)</span> <span class="token keyword">in</span> kf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>train<span class="token punctuation">&#125;</span></span><span class="token string">---</span><span class="token interpolation"><span class="token punctuation">&#123;</span>test<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># [ 3  4  5  6  7  8  9 10 11]---[0 1 2]</span><span class="token comment"># [ 0  1  2  6  7  8  9 10 11]---[3 4 5]</span><span class="token comment"># [ 0  1  2  3  4  5  9 10 11]---[6 7 8]</span><span class="token comment"># [0 1 2 3 4 5 6 7 8]---[ 9 10 11]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而<code>StratifiedKFold</code>根据数据集类别的分布划分数据集。其保证每个fold中，各个类别比例和原数据集相同：</p><img src="https://scikit-learn.org/stable/_images/sphx_glr_plot_cv_indices_009.png" class="[class names]" title="[100] [100] " alt="4折分层交叉验证，图片来自sklearn文档"><p>如：下面这段代码将数据分为4折。原数据两个类别比例为3:1，划分出的每个fold也保持这个比例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span>  np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> KFold<span class="token punctuation">,</span> StratifiedKFoldX <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>skf <span class="token operator">=</span> StratifiedKFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span> <span class="token number">15</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token keyword">for</span> train<span class="token punctuation">,</span>test <span class="token keyword">in</span> skf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>train<span class="token punctuation">&#125;</span></span><span class="token string">---</span><span class="token interpolation"><span class="token punctuation">&#123;</span>test<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># [ 4  5  6  7  8  9 10 11 12 13 14 16 17 18 19]---[ 0  1  2  3 15]</span><span class="token comment"># [ 0  1  2  3  8  9 10 11 12 13 14 15 17 18 19]---[ 4  5  6  7 16]</span><span class="token comment"># [ 0  1  2  3  4  5  6  7 12 13 14 15 16 18 19]---[ 8  9 10 11 17]</span><span class="token comment"># [ 0  1  2  3  4  5  6  7  8  9 10 11 15 16 17]---[12 13 14 18 19]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> sklearn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch</title>
      <link href="/2022/03/13/pytorch/"/>
      <url>/2022/03/13/pytorch/</url>
      
        <content type="html"><![CDATA[<h2 id="1-bmm"><a href="#1-bmm" class="headerlink" title="1. bmm"></a>1. bmm</h2><p>是定义在batch上的矩阵乘法。在“MOCO”论文中，计算对比损失用到了此方法：</p><img src="/2022/03/13/pytorch/%E8%AE%A1%E7%AE%97%E5%AF%B9%E6%AF%94%E6%8D%9F%E5%A4%B1.png" class="" title="计算对比损失"><p>上面的方法将<code>N,C</code>的矩阵reshape成为<code>N,1,C</code>的张量，然后使用<code>bmm</code>方法计算点积。</p><p>三维矩阵如下面示意：</p><p>其中每个<strong>蓝色</strong>框代表一个二维矩阵，一个<strong>绿色</strong>框代表batch中的一个数据。<code>bmm</code>方法执行时，先将对应的batch<strong>对齐</strong>，然后再进行batch-wise的<strong>二维矩阵乘法</strong>。下面左边这个矩阵是<code>3,2,4</code>的，而Moco中的是<code>N,1,-1</code>的。</p><img src="/2022/03/13/pytorch/%E4%B8%89%E7%BB%B4Tensor.png" class="" title="三维Tensor"><h2 id="2-clip-grad-norm"><a href="#2-clip-grad-norm" class="headerlink" title="2.clip_grad_norm_()"></a>2.<code>clip_grad_norm_()</code></h2><p>作用：归一化参数列表中所有的Tensor的梯度，使其梯度的模为给定的最大值。且返回原梯度的模。</p><p>比如，下面这段代码将<code>x</code>梯度的<code>1范数</code>设置为1，这会使得<code>x</code>的所有梯度之和为1。同样地，这段代码返回原梯度的模。下面例子中返回90，因为<br>$$<br>2+4+6+…+18&#x3D;90<br>$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nn<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>clip_grad_norm_<span class="token punctuation">(</span>parameters<span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>max_norm<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>norm_type<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Parameter<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> Parameter<span class="token punctuation">(</span>data<span class="token operator">=</span>torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>    y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    nn<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>clip_grad_norm_<span class="token punctuation">(</span>parameters<span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>max_norm<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>norm_type<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token comment"># tensor(1.)</span><span class="token comment"># tensor([[0.0000],</span><span class="token comment">#         [0.0222],</span><span class="token comment">#         [0.0444],</span><span class="token comment">#         [0.0667],</span><span class="token comment">#         [0.0889],</span><span class="token comment">#         [0.1111],</span><span class="token comment">#         [0.1333],</span><span class="token comment">#         [0.1556],</span><span class="token comment">#         [0.1778],</span><span class="token comment">#         [0.2000]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-保存和加载模型"><a href="#3-保存和加载模型" class="headerlink" title="3.保存和加载模型"></a>3.保存和加载模型</h2><p><a href="https://pytorch.org/docs/stable/notes/serialization.html#saving-loading-tensors">文档链接</a></p><h3 id="3-1保存张量"><a href="#3-1保存张量" class="headerlink" title="3.1保存张量"></a>3.1保存张量</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">t <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">'tensor.pt'</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'tensor.pt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文档中说，保存的文件最好以’.pt’或者’.pth’为后缀名。</p><h3 id="3-2保存字典"><a href="#3-2保存字典" class="headerlink" title="3.2保存字典"></a>3.2保存字典</h3><p>因为这利用了python的pickle模块做持久化，因此字典、列表等数据结构也可以持久化。</p><h3 id="3-3保存模型"><a href="#3-3保存模型" class="headerlink" title="3.3保存模型"></a>3.3保存模型</h3><p>保存和加载模型时，模型只和<code>state_dict</code>交互。剩下的交给<code>torch.save</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">bn <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> track_running_stats<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>bn<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'bn.pt'</span><span class="token punctuation">)</span>bn_state_dict <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'bn.pt'</span><span class="token punctuation">)</span>new_bn <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> track_running_stats<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>new_bn<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>bn_state_dict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这种方式需要事先创建好模型，然后再加载文件。能不能直接从磁盘上加载出整个模型呢？当然是能的。但是<a href="https://pytorch.org/tutorials/beginner/saving_loading_models.html#save-load-entire-model">文档</a>中说“这么做可能使程序因为各种原因出bug”，因为pickle模块并不会保存保存类的信息。</p><h2 id="4-张量的一些方法"><a href="#4-张量的一些方法" class="headerlink" title="4. 张量的一些方法"></a>4. 张量的一些方法</h2><h3 id="4-1-tolist"><a href="#4-1-tolist" class="headerlink" title="4.1 tolist()"></a>4.1 tolist()</h3><p>作用：返回由张量数据组成的嵌套列表。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># [0, 1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-2-argmax"><a href="#4-2-argmax" class="headerlink" title="4.2 argmax()"></a>4.2 argmax()</h3><p><a href="https://pytorch.org/docs/stable/generated/torch.argmax.html?highlight=argmax#torch.argmax">文档</a>中是这么描述的：</p><p> Returns the indices of the maximum values of a tensor <strong>across</strong> a dimension. </p><p>沿着某个维度，返回其最大值的下标。</p><h2 id="5-数据集相关"><a href="#5-数据集相关" class="headerlink" title="5.数据集相关"></a>5.数据集相关</h2><h3 id="5-1-Subset"><a href="#5-1-Subset" class="headerlink" title="5.1 Subset()"></a>5.1 Subset()</h3><p><a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.Subset">文档链接</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Subset<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> indices<span class="token punctuation">)</span><span class="token comment"># 返回数据集的子数据集</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（存疑。这和直接切片有什么不同？）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遇到的错误</title>
      <link href="/2022/03/13/%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2022/03/13/%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Python中的错误"><a href="#1-Python中的错误" class="headerlink" title="1. Python中的错误"></a>1. Python中的错误</h1><h2 id="1-1-os模块"><a href="#1-1-os模块" class="headerlink" title="1.1 os模块"></a>1.1 os模块</h2><p>在用<code>os.system()</code>执行<code>cmd</code>命令时，遇到了错误：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">r'hexo n "新博客"'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其输出是这样的：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">Usage: hexo &lt;command&gt;Commands:  help     Get help on a command.  init     Create a new Hexo folder.  version  Display version information.Global Options:  --config  Specify config file instead of using _config.yml  --cwd     Specify the CWD  --debug   Display all verbose messages in the terminal  --draft   Display draft posts  --safe    Disable all plugins and scripts  --silent  Hide output on console<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搜了下，发现是因为命令中有<strong>空格</strong>。所以想在<code>python</code>中执行<code>cmd</code> 命令，还真不容易啊。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Windows </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dgl学习记录</title>
      <link href="/2022/03/13/dgl%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/03/13/dgl%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-图"><a href="#第1章-图" class="headerlink" title="第1章 图"></a>第1章 图</h1><p><strong>本文是<a href="https://docs.dgl.ai/en/0.8.x/guide_cn/">dgl官方文档阅读记录</a>。</strong></p><h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h2><h2 id="1-2-图、节点和边"><a href="#1-2-图、节点和边" class="headerlink" title="1.2 图、节点和边"></a>1.2 图、节点和边</h2><img src="/2022/03/13/dgl%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E7%9B%AE%E6%A0%87%E5%9B%BE.png" class="" title="目标图"><p>如果想创建一个上面这样的图，需要创建两个表示边的<code>tensor</code>，然后调用<code>dgl.graph()</code>方法。这两个tensor分别是源节点和目标节点的ID：<a href="https://docs.dgl.ai/en/0.8.x/guide_cn/graph-graphs-nodes-edges.html">参考官方文档</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> dglu <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>v <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>g <span class="token operator">=</span> dgl<span class="token punctuation">.</span>graph<span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-节点和边的特征"><a href="#1-3-节点和边的特征" class="headerlink" title="1.3 节点和边的特征"></a>1.3 节点和边的特征</h2><p>可以通过<code>DGLGraph</code>的<code>ndata</code>和<code>edata</code>接口访问图的具名特征：（假设图<code>g</code>已经创建）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">g<span class="token punctuation">.</span>ndata<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span><span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>g<span class="token punctuation">.</span>num_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>g<span class="token punctuation">.</span>edata<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>g<span class="token punctuation">.</span>num_edges<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h2><h2 id="1-5-异构图"><a href="#1-5-异构图" class="headerlink" title="1.5     异构图"></a>1.5     异构图</h2><p>若一个图中，有不同类型的边和节点，那么这个图就是异构图。在<code>dgl</code>中，用<code>DGLHeteroGraph</code>表示一个异构图。用<code>dgl.heterograph()</code>方法可以创建异构图，其第一个参数是一个字典。字典的键是元组，用以表示<code>节点类型-边类型-节点类型</code>的连接类型；字典的值是表示两个边的<code>tensor</code>（和同构图一样）。如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> dglu <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>v <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>g <span class="token operator">=</span> dgl<span class="token punctuation">.</span>heterograph<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token string">"drug"</span><span class="token punctuation">,</span> <span class="token string">"interacts"</span><span class="token punctuation">,</span> <span class="token string">"drug"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">"gene"</span><span class="token punctuation">,</span> <span class="token string">"interacts"</span><span class="token punctuation">,</span> <span class="token string">"drug"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># &lt;class 'dgl.heterograph.DGLHeteroGraph'></span><span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token comment"># Graph(num_nodes=&#123;'drug': 4, 'gene': 2&#125;,</span><span class="token comment">#       num_edges=&#123;('drug', 'interacts', 'drug'): 4, ('gene', 'interacts', 'drug'): 4&#125;,</span><span class="token comment">#       metagraph=[('drug', 'drug', 'interacts'), ('gene', 'drug', 'interacts')])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第2章：消息传递范式"><a href="#第2章：消息传递范式" class="headerlink" title="第2章：消息传递范式"></a>第2章：消息传递范式</h1><h2 id="2-1-内置函数和消息传递API"><a href="#2-1-内置函数和消息传递API" class="headerlink" title="2.1 内置函数和消息传递API"></a>2.1 内置函数和消息传递API</h2><h3 id="2-1-1-消息的生成"><a href="#2-1-1-消息的生成" class="headerlink" title="2.1.1 消息的生成"></a>2.1.1 消息的生成</h3><p><strong>message</strong>是边的特征。即，在图的<code>edata</code>属性中。根据据源节点、目标节点和边这三者的特征可以计算出<strong>message</strong>。比如，下面这个函数指定计算<code>g.edata[&quot;he&quot;]</code>的方式，具体为：</p><p><code>g.edata[&quot;he&quot;]</code> <code>=</code>源节点的x特征<code>+</code>目标节点的y特征：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">message_fn</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"he"</span><span class="token punctuation">:</span> edges<span class="token punctuation">.</span>src<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">+</span> edges<span class="token punctuation">.</span>dst<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个函数的参数<code>edges</code>有三个属性<code>src,dst,data</code>，分别用来访问源节点、目标节点和边的特征 。定义好传播函数后，就可以在图上传播了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">g<span class="token punctuation">.</span>apply_edges<span class="token punctuation">(</span>message_fn<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dgl<span class="token keyword">import</span> torchu <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>v <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>g <span class="token operator">=</span> dgl<span class="token punctuation">.</span>graph<span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>g<span class="token punctuation">.</span>ndata<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>g<span class="token punctuation">.</span>num_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>g<span class="token punctuation">.</span>ndata<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>g<span class="token punctuation">.</span>num_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">message_fn</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"he"</span><span class="token punctuation">:</span> edges<span class="token punctuation">.</span>src<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">+</span> edges<span class="token punctuation">.</span>dst<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>g<span class="token punctuation">.</span>apply_edges<span class="token punctuation">(</span>message_fn<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>edata<span class="token punctuation">)</span><span class="token comment"># &#123;'he': tensor([[3., 3., 3.],</span><span class="token comment">#         [3., 3., 3.],</span><span class="token comment">#         [3., 3., 3.],</span><span class="token comment">#         [3., 3., 3.]])&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-2-内置函数"><a href="#2-1-2-内置函数" class="headerlink" title="2.1.2 内置函数"></a>2.1.2 内置函数</h3><p>类似上面的<code>message_fn()</code>，框架已经提供了很多消息函数和聚合函数。</p><p>比如：将源节点<code>（u）</code>的特征<code>fn</code>与边特征<code>a</code>相乘，得到消息<code>m</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dgl<span class="token punctuation">.</span>function <span class="token keyword">as</span> fnfn<span class="token punctuation">.</span>u_mul_e<span class="token punctuation">(</span><span class="token string">'ft'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后对所有<code>m</code>消息求和，得到新的节点特征<code>ft</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fn<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'ft'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_all_example</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 在graph.ndata['ft']中存储结果</span>    graph<span class="token punctuation">.</span>update_all<span class="token punctuation">(</span>fn<span class="token punctuation">.</span>u_mul_e<span class="token punctuation">(</span><span class="token string">'ft'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     fn<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'ft'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 在update_all外调用更新函数</span>    final_ft <span class="token operator">=</span> graph<span class="token punctuation">.</span>ndata<span class="token punctuation">[</span><span class="token string">'ft'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span>    <span class="token keyword">return</span> final_ft<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数学公式为：<img src="/2022/03/13/dgl%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E7%A4%BA%E4%BE%8B.png" class="" title="消息传递示例"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 图神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python常用模块</title>
      <link href="/2022/03/13/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
      <url>/2022/03/13/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="1-shutil"><a href="#1-shutil" class="headerlink" title="1. shutil"></a>1. shutil</h1><h2 id="1-1-shutil-copyfile-src-des"><a href="#1-1-shutil-copyfile-src-des" class="headerlink" title="1.1 shutil.copyfile(src,des)"></a>1.1 <code>shutil.copyfile(src,des)</code></h2><p>   从<code>src</code>拷贝文件到<code>des</code>。且<code>des</code>目录里不能有未创建的文件夹。关键部分源码：</p>   <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#....</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fsrc<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fdst<span class="token punctuation">:</span>   <span class="token comment">#....</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   可以看到，这函数调用<code>open()</code>方法，打开了两个文件，完成复制。</p><h2 id="1-2-shutil-copytree-src-dst-dirs-exist-ok-False"><a href="#1-2-shutil-copytree-src-dst-dirs-exist-ok-False" class="headerlink" title="1.2 shutil.copytree(src, dst,dirs_exist_ok=False)"></a>1.2 <code>shutil.copytree(src, dst,dirs_exist_ok=False)</code></h2><p>   递归式拷贝<code>src</code>文件树到<code>dst</code>中。若<code>dirs_exist_ok=True</code>，那么如果<code>dst</code>中已经存在某些文件，则会跳过复制而不报错。反之亦然。</p><h2 id="1-3-shutil-make-archive-quot-archive-quot-quot-zip-quot-quot-quot"><a href="#1-3-shutil-make-archive-quot-archive-quot-quot-zip-quot-quot-quot" class="headerlink" title="1.3 shutil.make_archive(&quot;archive&quot;,&quot;zip&quot;,&quot;.&quot;)"></a>1.3 <code>shutil.make_archive(&quot;archive&quot;,&quot;zip&quot;,&quot;.&quot;)</code></h2><p>   这里直接上例子了。上面这句作用是将当前目录下文件打包成压缩包，并返回压缩包的全路径。</p><h1 id="2-collections"><a href="#2-collections" class="headerlink" title="2.collections"></a>2.collections</h1><h2 id="2-1-namedtuple"><a href="#2-1-namedtuple" class="headerlink" title="2.1 namedtuple"></a>2.1 <code>namedtuple</code></h2><p><code>namedtuple()</code>创建一个具名元组，它是元组的子类。类似于<code>Java</code>中的<code>POJO</code>，其只有一些具有意义的字段，只是为了存储信息。从“键值对”的角度看，它也类似字典。<br>例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">User <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tom <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment"># print(tom.name)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="3-内置部分"><a href="#3-内置部分" class="headerlink" title="3.内置部分"></a>3.内置部分</h1><h2 id="3-1-exec"><a href="#3-1-exec" class="headerlink" title="3.1 exec()"></a>3.1 exec()</h2><p>这是一个内置函数。是前天看<code>namedtuple</code>源码时发现的。作用是执行一段Python语句，这段语句以字符串形式传进这个函数。如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>    <span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token string">"d"</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> key <span class="token keyword">in</span> d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f" print(d['</span><span class="token interpolation"><span class="token punctuation">&#123;</span>key<span class="token punctuation">&#125;</span></span><span class="token string">']) "</span></span>    <span class="token keyword">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-assert"><a href="#3-2-assert" class="headerlink" title="3.2 assert"></a>3.2 assert</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">assert</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"n必须小于3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2022/03/13/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/assert%E9%94%99%E8%AF%AF%E7%9A%84%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF.png" class="" title="assert错误的报错信息"><h2 id="3-3-class"><a href="#3-3-class" class="headerlink" title="3.3 __class__"></a>3.3 __class__</h2><p>对象的<code>__class__</code>属性返回对象所属的类。返回值类型为<code>type</code>类型。<code>type</code>类型有个<code>__name__</code>字段，指示这个类的名字：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>b  <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token comment"># &lt;class '__main__.B'></span><span class="token comment"># &lt;class 'type'></span><span class="token comment"># B</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-os-path"><a href="#4-os-path" class="headerlink" title="4. os.path"></a>4. os.path</h1><h2 id="4-1-isfile"><a href="#4-1-isfile" class="headerlink" title="4.1 isfile()"></a>4.1 <code>isfile()</code></h2><p>签名为：<code>os.path.isfile(path)</code>，功能为判断<code>path</code>是否为现有的文件（文件夹不可以）。如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token operator">=</span><span class="token string">"."</span>res <span class="token operator">=</span> isfile<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment"># res 为False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-2isdir"><a href="#4-2isdir" class="headerlink" title="4.2isdir()"></a>4.2<code>isdir()</code></h2><p>与上面相似，这是判断<code>path</code>是否为现有文件夹。</p><h2 id="4-3-exists"><a href="#4-3-exists" class="headerlink" title="4.3 exists()"></a>4.3 <code>exists()</code></h2><p> <code>os.path.``exists</code>(<em>path</em>) </p><p>判断路径是否存在</p><h1 id="5-psutil"><a href="#5-psutil" class="headerlink" title="5.psutil"></a>5.psutil</h1><h3 id="5-1-virtual-memory"><a href="#5-1-virtual-memory" class="headerlink" title="5.1 virtual_memory()"></a>5.1 <code>virtual_memory()</code></h3><p>这函数返回内存的使用情况。文档中说返回一个<code>namedtuple</code>，但是打印的类型并不是。即使如此，返回的对象仍然跟<code>namedtupl</code>几乎一样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> psutilres <span class="token operator">=</span> psutil<span class="token punctuation">.</span>virtual_memory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># svmem(total=17038905344, available=6597857280, percent=61.3, used=10441048064, free=6597857280)</span><span class="token comment"># &lt;class 'psutil._pswindows.svmem'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>意为：总共16G内存，可用6.5G，已用61,3%，已使用10G，可用6.6G。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python库 </tag>
            
            <tag> Python </tag>
            
            <tag> 文件处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PySide2学习记录1</title>
      <link href="/2022/03/12/PySide2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/"/>
      <url>/2022/03/12/PySide2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</url>
      
        <content type="html"><![CDATA[<h1 id="简单实现：打开一个窗口"><a href="#简单实现：打开一个窗口" class="headerlink" title="简单实现：打开一个窗口"></a>简单实现：打开一个窗口</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QMainWindowapp <span class="token operator">=</span> QApplication<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>window <span class="token operator">=</span> QMainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码的效果为：</p><img src="/2022/03/12/PySide2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/1.png" class="" title="上述代码执行效果"><p>其中，<code>app</code>为控整个GUI程序的“管理者”。在初始化任何窗体之前，都应该先初始它。且它有一个<code>exec_()</code>方法。这个方法是继承自父类的，功能是进入GUI的事件处理循环。如果没有这句，窗口会一闪而过。继承关系如下：</p><img src="/2022/03/12/PySide2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/QApplication.png" class="" title="继承图。exec_()方法继承自其直接父类"><h1 id="按钮、slot、signal"><a href="#按钮、slot、signal" class="headerlink" title="按钮、slot、signal"></a>按钮、slot、signal</h1><p>控件被操作之后，会发送一个<strong>signal</strong>，可以指定一个函数去处理这个<strong>signal</strong>。这个函数大约就是<strong>slot</strong>了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QMainWindow<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QMessageBox<span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 初始化窗口</span>        self<span class="token punctuation">.</span>window <span class="token operator">=</span> QMainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 在window上放置一个button</span>        self<span class="token punctuation">.</span>button <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"提交"</span><span class="token punctuation">,</span>parent<span class="token operator">=</span>self<span class="token punctuation">.</span>window<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button_handler<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">button_handler</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 按钮点积信号的处理函数(slot)</span>        QMessageBox<span class="token punctuation">.</span>about<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>window<span class="token punctuation">,</span>            <span class="token string">"按钮提交反馈"</span><span class="token punctuation">,</span>            <span class="token string">"您刚才点击了按钮！"</span>        <span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>    https<span class="token punctuation">:</span><span class="token operator">//</span>doc<span class="token punctuation">.</span>qt<span class="token punctuation">.</span>io<span class="token operator">/</span>qt<span class="token operator">-</span><span class="token number">6</span><span class="token operator">/</span>qabstractbutton<span class="token punctuation">.</span>html<span class="token comment">#signals</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的执行结果为：</p><img src="/2022/03/12/PySide2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/button.png" class="" title="按钮点击事件、弹出消息框"><p><a href="https://doc.qt.io/qt-6/qabstractbutton.html#signals">这里有</a><code>QAbstractButton</code>的全部<strong>signal</strong>。</p><h1 id="使用Qt-Designer"><a href="#使用Qt-Designer" class="headerlink" title="使用Qt Designer"></a>使用Qt Designer</h1><p>手动调整控件的位置无疑是枯燥的。Qt库提供了一个工具，叫designer，可以用拖拽的方式先调整好GUI各个控件的大体位置。这个软件被安装在了虚拟环境的Scripts目录下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">D:\software\Anaconda\envs\tf2\Scripts\pyside2-designer.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用这个软件设计好界面后，将*.ui文件保存，然后在代码中加载它：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtUiTools <span class="token keyword">import</span> QUiLoader<span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 加载ui配置文件</span>        self<span class="token punctuation">.</span>ui <span class="token operator">=</span> QUiLoader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"ui/postman.ui"</span><span class="token punctuation">)</span>        <span class="token comment"># 显示窗体</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Python库 </tag>
            
            <tag> Python </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git设置</title>
      <link href="/2022/03/12/git%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/03/12/git%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="git-clone下载太慢"><a href="#git-clone下载太慢" class="headerlink" title="git clone下载太慢"></a>git clone下载太慢</h1><p>可以配置git 使用socket5 代理 ，如使用SSR（地址为socks5h:&#x2F;&#x2F;127.0.0.1:1080）：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global http.proxy &#39;socks5h:&#x2F;&#x2F;127.0.0.1:1080&#39;git config --global https.proxy &#39;socks5h:&#x2F;&#x2F;127.0.0.1:1080&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="git-配置-ssh秘钥"><a href="#git-配置-ssh秘钥" class="headerlink" title="git 配置 ssh秘钥"></a>git 配置 ssh秘钥</h1><p><a href="https://gitee.com/help/articles/4181">Gitee上</a>有生成秘钥的教程。</p><p><strong>步骤：</strong></p><p>先执行生成指令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh-keygen -t ed25519 -C &quot;anchor2019@outlook.com&quot;  # Generating public&#x2F;private ed25519 key pair...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行后，会在<code>~/.ssh/</code>目录下生成以下两个文件：</p><img src="/2022/03/12/git%E8%AE%BE%E7%BD%AE/%E7%A7%98%E9%92%A5%E6%96%87%E4%BB%B6.png" class="" title="秘钥文件"><p>可以使用<code>cat</code>执行查看公钥，并将公钥信息填在Gitee设置中：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat ~&#x2F;.ssh&#x2F;id_ed25519.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加后，可以测试是否成功：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh -T git@gitee.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 翻墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powershell</title>
      <link href="/2022/03/12/powershell/"/>
      <url>/2022/03/12/powershell/</url>
      
        <content type="html"><![CDATA[<h1 id="一行代码执行多条命令"><a href="#一行代码执行多条命令" class="headerlink" title="一行代码执行多条命令"></a>一行代码执行多条命令</h1><p>用<strong>分号</strong>实现。</p><p>如，重启hexo服务器：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">hexo clean <span class="token punctuation">;</span> hexo g <span class="token punctuation">;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/2022/03/12/Hexo/"/>
      <url>/2022/03/12/Hexo/</url>
      
        <content type="html"><![CDATA[<p>记录创建博客时遇到的内容</p><h2 id="1-hexo相关"><a href="#1-hexo相关" class="headerlink" title="1.hexo相关"></a>1.hexo相关</h2><h3 id="1-创建新文章"><a href="#1-创建新文章" class="headerlink" title="1. 创建新文章"></a>1. 创建新文章</h3>   <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo n &quot;作品名&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-嵌入网络图片"><a href="#2-嵌入网络图片" class="headerlink" title="2.嵌入网络图片"></a>2.嵌入网络图片</h3><p><code>&#123;% img [class names] https://scikit-learn.org/stable/_images/sphx_glr_plot_cv_indices_006.png [100] [100] '"4折交叉验证，图片来自sklearn文档" "4折交叉验证"' %&#125;</code></p><h2 id="2-一些参考文档"><a href="#2-一些参考文档" class="headerlink" title="2.一些参考文档"></a>2.一些参考文档</h2><h3 id="1-hexo文档"><a href="#1-hexo文档" class="headerlink" title="1. hexo文档"></a>1. <a href="https://hexo.io/zh-cn/docs/writing">hexo文档</a></h3><h3 id="2-stun主题的文档"><a href="#2-stun主题的文档" class="headerlink" title="2. stun主题的文档"></a>2. <a href="https://theme-stun.github.io/docs/zh-CN/guide/primary.html#%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95">stun主题的文档</a></h3><p>从这篇文档中，了解了hexo的文件目录是如何处理的。</p><h2 id="3-hexo-theme-matery主题相关"><a href="#3-hexo-theme-matery主题相关" class="headerlink" title="3.hexo-theme-matery主题相关"></a>3.hexo-theme-matery主题相关</h2><h3 id="1-设置公式"><a href="#1-设置公式" class="headerlink" title="1.设置公式"></a>1.设置公式</h3><p>需要开启mathja配置；然后在带有公式的文档的Front-matter中再加上<code>mathjax: true</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>介绍</title>
      <link href="/2022/03/12/%E6%80%BB%E8%BF%B0%E6%96%87%E7%AB%A0/"/>
      <url>/2022/03/12/%E6%80%BB%E8%BF%B0%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来访！祝你每天都有个好心情"><a href="#欢迎来访！祝你每天都有个好心情" class="headerlink" title="欢迎来访！祝你每天都有个好心情~"></a>欢迎来访！祝你每天都有个好心情~</h1><blockquote><p>引言测试</p><footer><strong>传习录, 王阳明</strong><cite><a href="https://hexo.io/zh-cn/docs/tag-plugins">hexo.io/zh-cn/docs/tag-plugins</a></cite></footer></blockquote><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>BATCHNORM2D</span><a href="https://pytorch.org/docs/stable/generated/torch.nn.BatchNorm2d.html?highlight=batchnorm2d#torch.nn.BatchNorm2d">BATCHNORM2D</a></div><code class="language-python"><span class="token comment"># With Learnable Parameters</span>m <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment"># Without Learnable Parameters</span>m <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> affine<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span>output <span class="token operator">=</span> m<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>名字title</span><a href="https://pytorch.org/docs/stable/generated/torch.nn.BatchNorm2d.html?highlight">link</a></div><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
