<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>spring web源码阅读记录</title>
      <link href="/2022/03/17/spring-web%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/03/17/spring-web%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-HiddenHttpMethodFilter"><a href="#1-HiddenHttpMethodFilter" class="headerlink" title="1. HiddenHttpMethodFilter"></a>1. HiddenHttpMethodFilter</h1><p>作用：是个过滤器。将表单中的请求转换成REST风格请求；将表单中仅支持的get和post方法扩展到所有的http方法（包括put、delete等）。</p><p>下面仅看一下这个类中的<code>doFilterInternal</code>方法。它首先判断当前请求是否为POST(且请求参数中没有错误），然后获取请求参数中，<code>this.methodParam</code>键对应的值。而这个键就是<code>&quot;_method&quot;</code>。在表单中就是<code>&lt;input name=&quot;_method&quot; value=&quot;delete&quot; type=&quot;hidden&quot;/&gt;</code>这里的键和值。然后判断这个值（即http方法名，在上面的value中）是否为空，若不空，则将其转化成大写，然后判断这方法是否为允许的方法。允许的方法在<code>ALLOWED_METHODS</code>字段中，包括三项：<code>put,delete,patch</code>。 最后，它创建了一个<code>HttpMethodRequestWrapper</code>。这个类是一个内部类，参见下一个的代码框：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HiddenHttpMethodFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ALLOWED_METHODS <span class="token operator">=</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>PUT<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>DELETE<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>PATCH<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** Default method parameter: &#123;@code _method&#125;. */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEFAULT_METHOD_PARAM <span class="token operator">=</span> <span class="token string">"_method"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> methodParam <span class="token operator">=</span> DEFAULT_METHOD_PARAM<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">HttpServletRequest</span> requestToUse <span class="token operator">=</span> request<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span>ERROR_EXCEPTION_ATTRIBUTE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> paramValue <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>methodParam<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>paramValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> method <span class="token operator">=</span> paramValue<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span>ENGLISH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ALLOWED_METHODS<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>requestToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpMethodRequestWrapper</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>requestToUse<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个内部类，它仅是覆写了<code>getMethod()</code>方法。将当前的方法名改成了目标方法名。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HttpMethodRequestWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServletRequestWrapper</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">HttpMethodRequestWrapper</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> spring-web </tag>
            
            <tag> spring </tag>
            
            <tag> 源码阅读` </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring web-mvc源码阅读记录</title>
      <link href="/2022/03/17/spring-web-mvc%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/03/17/spring-web-mvc%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>servlet</title>
      <link href="/2022/03/17/servlet/"/>
      <url>/2022/03/17/servlet/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Filter"><a href="#1-Filter" class="headerlink" title="1. Filter"></a>1. Filter</h1><p>在一个HTTP请求到达Servlet之前，会被若干Filter预处理。在Servlet响应返回到客户端之前，会有上述逆序的Filter做后处理。</p><p>客户端—-Filter1–Filter2——-Servlet（Controller）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> servlet </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring 常用配置</title>
      <link href="/2022/03/17/spring-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/03/17/spring-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-springboot"><a href="#1-springboot" class="headerlink" title="1. springboot"></a>1. springboot</h1><h2 id="1-Initializr"><a href="#1-Initializr" class="headerlink" title="1. Initializr"></a>1. Initializr</h2><p>阿里云网址：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;start.aliyun.com&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spring </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot源码阅读记录</title>
      <link href="/2022/03/17/spring-boot%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/03/17/spring-boot%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 源码阅读 </tag>
            
            <tag> Java </tag>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零碎遇到的单词</title>
      <link href="/2022/03/16/%E9%9B%B6%E7%A2%8E%E9%81%87%E5%88%B0%E7%9A%84%E5%8D%95%E8%AF%8D/"/>
      <url>/2022/03/16/%E9%9B%B6%E7%A2%8E%E9%81%87%E5%88%B0%E7%9A%84%E5%8D%95%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><h2 id="1-antibody-：抗体"><a href="#1-antibody-：抗体" class="headerlink" title="1 antibody ：抗体"></a>1 antibody ：抗体</h2><h2 id="2-dihedral：-两面的"><a href="#2-dihedral：-两面的" class="headerlink" title="2 dihedral： 两面的"></a>2 dihedral： 两面的</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章收藏</title>
      <link href="/2022/03/16/%E6%96%87%E7%AB%A0%E6%94%B6%E8%97%8F/"/>
      <url>/2022/03/16/%E6%96%87%E7%AB%A0%E6%94%B6%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-历年净增人口统计"><a href="#1-历年净增人口统计" class="headerlink" title="1. 历年净增人口统计"></a>1. 历年净增人口统计</h1><p> <img src="https://n.sinaimg.cn/news/crawl/587/w232h1155/20220118/23f8-7eaf2df18ad3490042f24d49217d4b31.jpg" alt="历年净增人口（数据来源：国家统计局数据）"> </p>]]></content>
      
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python多线程多线程</title>
      <link href="/2022/03/15/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/03/15/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-多进程"><a href="#1-多进程" class="headerlink" title="1.多进程"></a>1.多进程</h1><p>进程是分配资源的最小单位。分配完资源后，由线程来执行进程中的任务。所以，可以将进程当做线程的容器。线程间共享进程的资源。</p><p>启动一个python脚本后，就创建了一个进程，并创建一个主线程执行代码。各个变量就是属于这个进程的资源，后续创建的线程共享这些资源。</p><h2 id="1-实现多进程"><a href="#1-实现多进程" class="headerlink" title="1.实现多进程"></a>1.实现多进程</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"working...</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>work<span class="token punctuation">)</span>    p2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>work<span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-给方法传参"><a href="#2-给方法传参" class="headerlink" title="2.给方法传参"></a>2.给方法传参</h2><p>有两种参数可以传：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is  working...</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">, age is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>work<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>work<span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-获取pid和ppid"><a href="#3-获取pid和ppid" class="headerlink" title="3.获取pid和ppid"></a>3.获取pid和ppid</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pid <span class="token operator">=</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span>    ppid <span class="token operator">=</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"pid=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>pid<span class="token punctuation">&#125;</span></span><span class="token string">,ppid=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ppid<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>work<span class="token punctuation">)</span>    p2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>work<span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># pid=4556,ppid=16068</span><span class="token comment"># pid=16020,ppid=16068</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-设置守护进程"><a href="#4-设置守护进程" class="headerlink" title="4. 设置守护进程"></a>4. 设置守护进程</h2><p>若子进程为守护进程，那么一旦主进程结束，子进程也立即结束，不论后面还有多少任务没做。比如，下面的代码执行后，并没有打印“结束”信息：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"开始"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>work<span class="token punctuation">)</span>    p2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>work<span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>    p2<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 5680 开始</span><span class="token comment"># 12060 开始</span><span class="token comment"># </span><span class="token comment"># Process finished with exit code 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若子进程不是守护进程，那么当主进程和子进程是独立的。主进程嗖嗖地退出，就像调度员早早地离开了岗位一样。</p><h2 id="5-spawn和fork"><a href="#5-spawn和fork" class="headerlink" title="5.spawn和fork"></a>5.spawn和fork</h2><p>在Windows中，创建多进程时必须用<code>if __name__==&#39;__main__&#39;</code>语句。否则会报错。究其原因，是因为Windows使用spawn完成子进程的创建，而linux使用fork。这两者的支持性不同，所以代码也要合乎规则才能使用。</p><h2 id="6-GIL锁"><a href="#6-GIL锁" class="headerlink" title="6.GIL锁"></a>6.GIL锁</h2><p>是CPython中特有的玩意。它使得同一个进程中，同一时刻只能有一个线程被CPU调用。所以，若要发挥多核优势，需要使用多进程。</p><p>IO密集型任务适合使用多线程，因为根本用不着那么多CPU资源；</p><p>而计算密集型任务更适合多进程。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium</title>
      <link href="/2022/03/15/selenium/"/>
      <url>/2022/03/15/selenium/</url>
      
        <content type="html"><![CDATA[<h1 id="1-click方法失效"><a href="#1-click方法失效" class="headerlink" title="1. click方法失效"></a>1. click方法失效</h1><p>换成：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">driver<span class="token punctuation">.</span><span class="token function">execute_script</span><span class="token punctuation">(</span><span class="token string">"$(arguments[0]).cilck()"</span><span class="token punctuation">,</span>button<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2-点击下一页后找不到元素"><a href="#2-点击下一页后找不到元素" class="headerlink" title="2. 点击下一页后找不到元素"></a>2. 点击下一页后找不到元素</h1><p>刷新一下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">driver<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3-模板"><a href="#3-模板" class="headerlink" title="3. 模板"></a>3. 模板</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options<span class="token keyword">class</span> <span class="token class-name">Crawler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">""</span>        self<span class="token punctuation">.</span>options_setup<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>chrome <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>chrome_options<span class="token operator">=</span>self<span class="token punctuation">.</span>chrome_options<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>set_page_load_timeout<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">options_setup</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>chrome_options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--incognito"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-infobars'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        点击，以替代默认的点击。        :param element:         :return:         """</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_click<span class="token punctuation">(</span>element<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"点击失败！"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"$(arguments[0]).click()"</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"点击</span><span class="token interpolation"><span class="token punctuation">&#123;</span>element<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span></span><span class="token string">成功！"</span></span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"点击</span><span class="token interpolation"><span class="token punctuation">&#123;</span>element<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span></span><span class="token string">失败！"</span></span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        替代chrome.get，因为其会报错，且一次try...catch无法处理异常        :param url:         :return:         """</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正常加载（3秒以内）"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.stop()'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"当前页面</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span></span><span class="token string">加载时间过长，停止加载。"</span></span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">find_element_by_css</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> css<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> is_all<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        找元素。弱parent=None，则默认的parent为self.chrome        弱is_all为True，则为找到所有匹配的        :param css: 选择器        :param parent: 在哪个父标签上找        :param is_all: 是否找所有匹配的        :return:         """</span>        res <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> parent<span class="token punctuation">:</span>            parent <span class="token operator">=</span> self<span class="token punctuation">.</span>chrome        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> is_all<span class="token punctuation">:</span>                res <span class="token operator">=</span> parent<span class="token punctuation">.</span>find_elements_by_css_selector<span class="token punctuation">(</span>css<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> parent<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span>css<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"找到了"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没找到"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res    <span class="token keyword">def</span> <span class="token function">refresh</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_refresh<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"刷新超时"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_refresh</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>refresh<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    Crawler<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python内置类型-迭代器</title>
      <link href="/2022/03/15/python%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/2022/03/15/python%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B-%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-迭代器（Iterator）"><a href="#1-迭代器（Iterator）" class="headerlink" title="1.迭代器（Iterator）"></a>1.<a href="https://docs.python.org/zh-cn/3.9/glossary.html">迭代器</a>（Iterator）</h1><blockquote><p> 用来表示一连串数据流的对象。重复调用迭代器的 <a href="https://docs.python.org/zh-cn/3.9/library/stdtypes.html#iterator.__next__"><code>__next__()</code></a> 方法（或将其传给内置函数 <a href="https://docs.python.org/zh-cn/3.9/library/functions.html#next"><code>next()</code></a>）将逐个返回流中的项。  当没有数据可用时则将引发 <a href="https://docs.python.org/zh-cn/3.9/library/exceptions.html#StopIteration"><code>StopIteration</code></a> 异常。 </p></blockquote><p>也就是说，迭代器是实现了<code>__next__</code>方法的对象。</p><h1 id="2-可迭代对象（Iterable）"><a href="#2-可迭代对象（Iterable）" class="headerlink" title="2.可迭代对象（Iterable）"></a>2.可迭代对象（Iterable）</h1><blockquote><p> 能够逐一返回其成员项的对象。 如 定义了 <a href="https://docs.python.org/zh-cn/3.9/reference/datamodel.html#object.__iter__"><code>__iter__()</code></a> 方法或是实现了 <a href="https://docs.python.org/zh-cn/3.9/glossary.html#term-sequence">序列</a> 语义的 <a href="https://docs.python.org/zh-cn/3.9/reference/datamodel.html#object.__getitem__"><code>__getitem__()</code></a> 方法的任意自定义类对象。 </p></blockquote><p>例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">IterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>some_list <span class="token operator">=</span> IterTest<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>some_list</code>就是“可迭代”的。它并没有实现<code>__iter__</code>方法，所以在<code>for in </code>语句中，是调用<code>__getitem__</code>方法的；如果同时实现了这两个方法，则优先调用其<code>__iter__</code>方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">IterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>networkx源码阅读</title>
      <link href="/2022/03/15/networkx%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
      <url>/2022/03/15/networkx%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Graph类"><a href="#1-Graph类" class="headerlink" title="1. Graph类"></a>1. Graph类</h1><h2 id="1-1-类字段"><a href="#1-1-类字段" class="headerlink" title="1.1 类字段"></a>1.1 类字段</h2><p><code>Graph</code>类：</p><p>首先创建了几个静态字段，表明使用<code>字典类</code>来存储图中的节点、边、图的特征信息。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Graph</span><span class="token punctuation">:</span>node_dict_factory <span class="token operator">=</span> <span class="token builtin">dict</span>    node_attr_dict_factory <span class="token operator">=</span> <span class="token builtin">dict</span>    adjlist_outer_dict_factory <span class="token operator">=</span> <span class="token builtin">dict</span>    adjlist_inner_dict_factory <span class="token operator">=</span> <span class="token builtin">dict</span>    edge_attr_dict_factory <span class="token operator">=</span> <span class="token builtin">dict</span>    graph_attr_dict_factory <span class="token operator">=</span> <span class="token builtin">dict</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-构造器"><a href="#1-2-构造器" class="headerlink" title="1.2 构造器"></a>1.2 构造器</h2><p>再看它的构造器函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> incoming_graph_data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>attr<span class="token punctuation">)</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>graph_attr_dict_factory <span class="token operator">=</span> self<span class="token punctuation">.</span>graph_attr_dict_factory      self<span class="token punctuation">.</span>node_dict_factory <span class="token operator">=</span> self<span class="token punctuation">.</span>node_dict_factory      self<span class="token punctuation">.</span>node_attr_dict_factory <span class="token operator">=</span> self<span class="token punctuation">.</span>node_attr_dict_factory      self<span class="token punctuation">.</span>adjlist_outer_dict_factory <span class="token operator">=</span> self<span class="token punctuation">.</span>adjlist_outer_dict_factory      self<span class="token punctuation">.</span>adjlist_inner_dict_factory <span class="token operator">=</span> self<span class="token punctuation">.</span>adjlist_inner_dict_factory      self<span class="token punctuation">.</span>edge_attr_dict_factory <span class="token operator">=</span> self<span class="token punctuation">.</span>edge_attr_dict_factory      self<span class="token punctuation">.</span>graph <span class="token operator">=</span> self<span class="token punctuation">.</span>graph_attr_dict_factory<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># dictionary for graph attributes</span>      self<span class="token punctuation">.</span>_node <span class="token operator">=</span> self<span class="token punctuation">.</span>node_dict_factory<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># empty node attribute dict</span>      self<span class="token punctuation">.</span>_adj <span class="token operator">=</span> self<span class="token punctuation">.</span>adjlist_outer_dict_factory<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># empty adjacency dict</span>               <span class="token comment"># attempt to load graph with data</span>      <span class="token keyword">if</span> incoming_graph_data <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>          convert<span class="token punctuation">.</span>to_networkx_graph<span class="token punctuation">(</span>incoming_graph_data<span class="token punctuation">,</span> create_using<span class="token operator">=</span>self<span class="token punctuation">)</span>      <span class="token comment"># load graph attributes (must be after convert)</span>      self<span class="token punctuation">.</span>graph<span class="token punctuation">.</span>update<span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键在最中间的三句：三个字典，以存储节点、邻接矩阵的属性信息。</p><p>最后两句是判断初始化对象时是否传入了图的信息，如果有则更新它们。</p><h2 id="1-3-nodes-属性"><a href="#1-3-nodes-属性" class="headerlink" title="1.3 nodes 属性"></a>1.3 nodes 属性</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@property</span>   <span class="token keyword">def</span> <span class="token function">nodes</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       nodes <span class="token operator">=</span> NodeView<span class="token punctuation">(</span>self<span class="token punctuation">)</span>       self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span><span class="token string">"nodes"</span><span class="token punctuation">]</span> <span class="token operator">=</span> nodes       <span class="token keyword">return</span> nodes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个属性是被<code>@property</code>修饰的，是一个<code>NodeView</code>对象。</p><p>且，这个属性是“懒加载”的。如果没有访问这个属性，则不会在对象中创建这个属性。</p><h2 id="1-4-add-nodes-from"><a href="#1-4-add-nodes-from" class="headerlink" title="1.4 add_nodes_from"></a>1.4 add_nodes_from</h2><p>功能：从给定列表中添加节点，并更新节点特征数据。</p><p>代码中迭代每个新节点，先判断这节点是否已经存在，若不存在，则为这个节点在<code>_adj</code>和<code>_node</code>字典中创建一个条目（字典）。最后，更新这个节点的特征信息。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_nodes_from</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nodes_for_adding<span class="token punctuation">,</span> <span class="token operator">**</span>attr<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">for</span> n <span class="token keyword">in</span> nodes_for_adding<span class="token punctuation">:</span>          <span class="token keyword">try</span><span class="token punctuation">:</span>              newnode <span class="token operator">=</span> n <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>_node              newdict <span class="token operator">=</span> attr          <span class="token keyword">except</span> TypeError<span class="token punctuation">:</span>              n<span class="token punctuation">,</span> ndict <span class="token operator">=</span> n              newnode <span class="token operator">=</span> n <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>_node              newdict <span class="token operator">=</span> attr<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>              newdict<span class="token punctuation">.</span>update<span class="token punctuation">(</span>ndict<span class="token punctuation">)</span>          <span class="token keyword">if</span> newnode<span class="token punctuation">:</span>              <span class="token keyword">if</span> n <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                  <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"None cannot be a node"</span><span class="token punctuation">)</span>              self<span class="token punctuation">.</span>_adj<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>adjlist_inner_dict_factory<span class="token punctuation">(</span><span class="token punctuation">)</span>              self<span class="token punctuation">.</span>_node<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>node_attr_dict_factory<span class="token punctuation">(</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>_node<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>newdict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5-add-edge方法"><a href="#1-5-add-edge方法" class="headerlink" title="1.5 add_edge方法"></a>1.5 add_edge方法</h2><p>功能：添加一条u和v之间的连边，并更新边的特征信息。</p><p>首先判断u和v是否存在，若不存在则抛出异常。</p><p>然后获取节点u的邻接信息，即获得<code>self._adj[u]</code>。这个信息也是<code>dict</code>类型。最后更新数据到<code>self._adj</code>中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> u_of_edge<span class="token punctuation">,</span> v_of_edge<span class="token punctuation">,</span> <span class="token operator">**</span>attr<span class="token punctuation">)</span><span class="token punctuation">:</span>      u<span class="token punctuation">,</span> v <span class="token operator">=</span> u_of_edge<span class="token punctuation">,</span> v_of_edge      <span class="token comment"># add nodes</span>      <span class="token keyword">if</span> u <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>_node<span class="token punctuation">:</span>          <span class="token keyword">if</span> u <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>              <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"None cannot be a node"</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>_adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>adjlist_inner_dict_factory<span class="token punctuation">(</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>_node<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>node_attr_dict_factory<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> v <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>_node<span class="token punctuation">:</span>          <span class="token keyword">if</span> v <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>              <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"None cannot be a node"</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>_adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>adjlist_inner_dict_factory<span class="token punctuation">(</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>_node<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>node_attr_dict_factory<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># add the edge</span>      datadict <span class="token operator">=</span> self<span class="token punctuation">.</span>_adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>v<span class="token punctuation">,</span> self<span class="token punctuation">.</span>edge_attr_dict_factory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      datadict<span class="token punctuation">.</span>update<span class="token punctuation">(</span>attr<span class="token punctuation">)</span>      self<span class="token punctuation">.</span>_adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> datadict      self<span class="token punctuation">.</span>_adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> datadict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-NodeView类"><a href="#2-NodeView类" class="headerlink" title="2. NodeView类"></a>2. NodeView类</h1><h2 id="2-1-构造器"><a href="#2-1-构造器" class="headerlink" title="2.1 构造器"></a>2.1 构造器</h2><p>其构造器为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">NodeView</span><span class="token punctuation">(</span>Mapping<span class="token punctuation">,</span> Set<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>_nodes <span class="token operator">=</span> graph<span class="token punctuation">.</span>_node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这只是保存了<code>graph._node</code>对象。这对象前面已经写过，是一个字典，保存着图中节点的特征信息。</p><h2 id="2-2-getitem-方法"><a href="#2-2-getitem-方法" class="headerlink" title="2.2 __getitem__方法"></a>2.2 <code>__getitem__</code>方法</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token builtin">slice</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> nx<span class="token punctuation">.</span>NetworkXError<span class="token punctuation">(</span>            <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">type</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">&#125;</span></span><span class="token string"> does not support slicing, "</span></span>            <span class="token string-interpolation"><span class="token string">f"try list(G.nodes)[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">.</span>start<span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">.</span>stop<span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">.</span>step<span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span>        <span class="token punctuation">)</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_nodes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这只是简单地做了个判断，然后返回字典中键<code>n</code>对应的值。</p><h1 id="3-karate-club-graph方法"><a href="#3-karate-club-graph方法" class="headerlink" title="3.karate_club_graph方法"></a>3.karate_club_graph方法</h1><p>这方法返回俱乐部关系图。</p><p>首先是创建所有人的id，然后指定属于club1的人的id，然后创建图，添加节点。然后添加连边，更新节点的<code>club</code>属性。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">karate_club_graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    all_members <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    club1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">&#125;</span>    G <span class="token operator">=</span> nx<span class="token punctuation">.</span>Graph<span class="token punctuation">(</span><span class="token punctuation">)</span>    G<span class="token punctuation">.</span>add_nodes_from<span class="token punctuation">(</span>all_members<span class="token punctuation">)</span>    G<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Zachary's Karate Club"</span>    zacharydat <span class="token operator">=</span> <span class="token triple-quoted-string string">"""\0 1 1 1 1 1 1 1 1 0 1 1 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 01 0 1 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 01 1 0 1 0 0 0 1 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 01 1 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 01 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 01 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 01 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 01 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 01 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 10 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 11 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 01 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 01 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 01 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 10 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 01 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 11 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 11 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 10 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 10 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 10 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 1 10 0 1 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 1 0 1 0 1 1 0 0 0 0 0 1 1 1 0 10 0 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 0"""</span>    <span class="token keyword">for</span> row<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>zacharydat<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        thisrow <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> col<span class="token punctuation">,</span> entry <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>thisrow<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> entry <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                G<span class="token punctuation">.</span>add_edge<span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">)</span>    <span class="token comment"># Add the name of each member's club as a node attribute.</span>    <span class="token keyword">for</span> v <span class="token keyword">in</span> G<span class="token punctuation">:</span>        G<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"club"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Mr. Hi"</span> <span class="token keyword">if</span> v <span class="token keyword">in</span> club1 <span class="token keyword">else</span> <span class="token string">"Officer"</span>    <span class="token keyword">return</span> G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 源码阅读 </tag>
            
            <tag> python </tag>
            
            <tag> networkx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python装饰器</title>
      <link href="/2022/03/15/python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2022/03/15/python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-装饰器例子"><a href="#1-装饰器例子" class="headerlink" title="1. 装饰器例子"></a>1. 装饰器例子</h1><p>如果有个名为<code>eat</code>的方法，其功能是简单的输出：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"eating..."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在想给这个函数加日志功能。可以使用“面向切片”的思想来完成这个任务：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">logger_decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"日志信息..."</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> res    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法接受一个方法对象，返回新的方法对象。这个新的方法对象是“加强了”的原方法。下面是测试：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"eating..."</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">logger_decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"日志信息..."</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> res    <span class="token keyword">return</span> wrapper<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    eat <span class="token operator">=</span> logger_decorator<span class="token punctuation">(</span>eat<span class="token punctuation">)</span>    eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/03/15/python%E8%A3%85%E9%A5%B0%E5%99%A8/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="运行结果"><h1 id="2-简便语法"><a href="#2-简便语法" class="headerlink" title="2.简便语法"></a>2.简便语法</h1><p>上面的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">eat <span class="token operator">=</span> logger_decorator<span class="token punctuation">(</span>eat<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这句，可以省略，而使用python提供的“语法糖”：使用<code>@logger_decorator</code>就可以：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">logger_decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"日志信息..."</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> res    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@logger_decorator</span><span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"eating..."</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># eat = logger_decorator(eat)</span>    eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果和上面一样。</p><h2 id="3-类作为装饰器"><a href="#3-类作为装饰器" class="headerlink" title="3.类作为装饰器"></a>3.类作为装饰器</h2><p>只要类是可调用的，就可以作为装饰器。例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">class</span> <span class="token class-name">LoggerDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>f <span class="token operator">=</span> f    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"日志信息..."</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@LoggerDecorator</span><span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"eating..."</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>eat<span class="token punctuation">)</span><span class="token punctuation">)</span>    eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中还输出了<code>eat</code>对象的类型。发现其已经变成了<code>LoggerDecorator</code>类型的了：</p><img src="/2022/03/15/python%E8%A3%85%E9%A5%B0%E5%99%A8/%E7%B1%BB%E8%A3%85%E9%A5%B0%E5%99%A8%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png" class="" title="类装饰器输出结果">]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图数据可视化</title>
      <link href="/2022/03/14/%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2022/03/14/%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="1-PyGraphviz"><a href="#1-PyGraphviz" class="headerlink" title="1. PyGraphviz"></a>1. PyGraphviz</h1><p>要使用这个库，需要先安装<code>graphviz</code>应用程序，并且需要将其放到环境变量中。然后再安装这个库。</p><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>图的绘制</span><a href="https://pygraphviz.github.io/documentation/stable/reference/agraph.html#pygraphviz.AGraph.draw">绘制图</a></div><code class="language-python">g<span class="token operator">=</span>nx<span class="token punctuation">.</span>karate_club_graph<span class="token punctuation">(</span><span class="token punctuation">)</span>g<span class="token operator">=</span>nx<span class="token punctuation">.</span>nx_graph<span class="token punctuation">.</span>to_agraph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># format指定何种格式，如pdf、png; prog指定图的layout</span>g<span class="token punctuation">.</span>draw<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> prog<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#prog有： </span><span class="token punctuation">[</span><span class="token string">"neato"</span><span class="token punctuation">,</span> <span class="token string">"dot"</span><span class="token punctuation">,</span> <span class="token string">"twopi"</span><span class="token punctuation">,</span> <span class="token string">"circo"</span><span class="token punctuation">,</span> <span class="token string">"fdp"</span><span class="token punctuation">,</span> <span class="token string">"nop"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2022/03/14/%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/%E7%94%BB%E5%87%BA%E7%9A%84%E5%9B%BE%E7%A4%BA%E6%84%8F.png" class="" title="画出的图示意">]]></content>
      
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有意思的小玩意</title>
      <link href="/2022/03/14/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%B0%8F%E7%8E%A9%E6%84%8F/"/>
      <url>/2022/03/14/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%B0%8F%E7%8E%A9%E6%84%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-分形法"><a href="#1-分形法" class="headerlink" title="1.分形法"></a>1.分形法</h1><p>在看matplotlib文档时，有个<a href="https://matplotlib.org/stable/gallery/lines_bars_and_markers/fill.html">画雪花</a>的实例，其中的雪花是用分行法计算出来的。</p><p>分形法：将一条线段三等分，然后将每一部分画成一个等边三角形，然后删掉原有的线段。</p><img src="/2022/03/14/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%B0%8F%E7%8E%A9%E6%84%8F/%E5%88%86%E5%BD%A2%E6%B3%95%E5%9B%BE%E7%A4%BA.png" class="" title="分形法图示">]]></content>
      
      
      
        <tags>
            
            <tag> 未分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm</title>
      <link href="/2022/03/14/pycharm/"/>
      <url>/2022/03/14/pycharm/</url>
      
        <content type="html"><![CDATA[<h2 id="1-收藏夹"><a href="#1-收藏夹" class="headerlink" title="1.收藏夹"></a>1.收藏夹</h2><p>Alt + 2</p>]]></content>
      
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy</title>
      <link href="/2022/03/13/numpy/"/>
      <url>/2022/03/13/numpy/</url>
      
        <content type="html"><![CDATA[<h2 id="1-random"><a href="#1-random" class="headerlink" title="1.random"></a>1.random</h2><h3 id="1-1-normal"><a href="#1-1-normal" class="headerlink" title="1.1 normal"></a>1.1 normal</h3><p>指定正态分布的均值和方差的随机分布：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plty <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>y<span class="token punctuation">,</span>bins<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：</p><img src="/2022/03/13/numpy/normal%E6%96%B9%E6%B3%95%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E7%9A%84%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class="" title="normal方法生成数据的直方图"><h3 id="1-2-uniform"><a href="#1-2-uniform" class="headerlink" title="1.2 uniform"></a>1.2 uniform</h3><p>顾名思义，是均匀分布：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plty <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>y<span class="token punctuation">,</span>bins<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：</p><img src="/2022/03/13/numpy/uniform%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E7%9A%84%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class="" title="uniform生成数据的直方图">]]></content>
      
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib</title>
      <link href="/2022/03/13/matplotlib/"/>
      <url>/2022/03/13/matplotlib/</url>
      
        <content type="html"><![CDATA[<h1 id="1-设置style（绘图风格）"><a href="#1-设置style（绘图风格）" class="headerlink" title="1.设置style（绘图风格）"></a>1.设置style（绘图风格）</h1><p>展示所有可用的风格：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">print</span><span class="token punctuation">(</span>plt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>available<span class="token punctuation">)</span><span class="token comment"># ['Solarize_Light2', '_classic_test_patch', 'bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark', 'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'tableau-colorblind10']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>seaborn风格示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">"seaborn"</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/03/13/matplotlib/seaborn%E9%A3%8E%E6%A0%BC%E7%9A%84plot.png" class="" title="seaborn风格的plot"><h1 id="2-常见图"><a href="#2-常见图" class="headerlink" title="2.常见图"></a>2.常见图</h1><h3 id="2-1-散点图"><a href="#2-1-散点图" class="headerlink" title="2.1 散点图"></a>2.1 散点图</h3><p>效果：</p><img src="/2022/03/13/matplotlib/%E6%95%A3%E7%82%B9%E5%9B%BE.png" class="" title="散点图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>size <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>color <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> s<span class="token operator">=</span>size<span class="token punctuation">,</span> c<span class="token operator">=</span>color<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-柱状图"><a href="#2-2-柱状图" class="headerlink" title="2.2 柱状图"></a>2.2 柱状图</h3><p>效果：</p><img src="/2022/03/13/matplotlib/%E6%9F%B1%E7%8A%B6%E5%9B%BE.png" class="" title="柱状图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>heights <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span> heights<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-1堆叠的柱状图"><a href="#2-2-1堆叠的柱状图" class="headerlink" title="2.2.1堆叠的柱状图"></a>2.2.1堆叠的柱状图</h4><img src="/2022/03/13/matplotlib/%E5%A0%86%E5%8F%A0%E7%9A%84%E6%9F%B1%E7%8A%B6%E5%9B%BE.png" class="" title="堆叠的柱状图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">5</span>menMeans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>womenMeans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>pos <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>n<span class="token punctuation">)</span>p1 <span class="token operator">=</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>pos<span class="token punctuation">,</span> menMeans<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"men"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar_label<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> label_type<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>pos<span class="token punctuation">,</span> womenMeans<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"women"</span><span class="token punctuation">,</span> bottom<span class="token operator">=</span>menMeans<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar_label<span class="token punctuation">(</span>p2<span class="token punctuation">,</span> label_type<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-并列的柱状图"><a href="#2-2-2-并列的柱状图" class="headerlink" title="2.2.2 并列的柱状图"></a>2.2.2 并列的柱状图</h4><img src="/2022/03/13/matplotlib/%E5%B9%B6%E5%88%97%E7%9A%84%E6%9F%B1%E7%8A%B6%E5%9B%BE.png" class="" title="并列的柱状图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">5</span>menMeans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>womenMeans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>pos <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>n<span class="token punctuation">)</span>width <span class="token operator">=</span> <span class="token number">0.35</span>rect1 <span class="token operator">=</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>pos <span class="token operator">-</span> width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> menMeans<span class="token punctuation">,</span> width<span class="token operator">=</span>width<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"men"</span><span class="token punctuation">)</span>rect2 <span class="token operator">=</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>pos <span class="token operator">+</span> width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> womenMeans<span class="token punctuation">,</span> width<span class="token operator">=</span>width<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"women"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar_label<span class="token punctuation">(</span>rect1<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar_label<span class="token punctuation">(</span>rect2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-broken-bar"><a href="#2-2-3-broken-bar" class="headerlink" title="2.2.3 broken_bar"></a>2.2.3 broken_bar</h4><img src="/2022/03/13/matplotlib/broken_bar.png" class="" title="broken_bar"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>xmin_width <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>ymin_height <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token comment"># 意思是，画两个矩形。</span><span class="token comment"># 其中第一个左下角坐标是(10,30),宽高为(20,40)</span><span class="token comment"># 其中第二个左下角坐标是(50,30),宽高为(10,40)</span>plt<span class="token punctuation">.</span>broken_barh<span class="token punctuation">(</span>xmin_width<span class="token punctuation">,</span> ymin_height<span class="token punctuation">)</span><span class="token comment"># 这个矩形左下角坐标是(10,3),宽高为(10,5)</span>plt<span class="token punctuation">.</span>broken_barh<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-棉棒图"><a href="#2-3-棉棒图" class="headerlink" title="2.3 棉棒图"></a>2.3 棉棒图</h3><img src="/2022/03/13/matplotlib/%E6%A3%89%E6%A3%92%E5%9B%BE.png" class="" title="棉棒图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">7</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>heights <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>stem<span class="token punctuation">(</span>x<span class="token punctuation">,</span> heights<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-路径图"><a href="#2-4-路径图" class="headerlink" title="2.4 路径图"></a>2.4 路径图</h3><p>效果：</p><img src="/2022/03/13/matplotlib/%E8%B7%AF%E5%BE%84%E5%9B%BE.png" class="" title="路径图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">7</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>heights <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>step<span class="token punctuation">(</span>x<span class="token punctuation">,</span> heights<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> heights<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-fill-between"><a href="#2-5-fill-between" class="headerlink" title="2.5 fill_between"></a>2.5 fill_between</h3><p>效果：</p><img src="/2022/03/13/matplotlib/fill_between.png" class="" title="fill_between"><p>代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">16</span>k <span class="token operator">=</span> <span class="token number">4</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>y1 <span class="token operator">=</span> k <span class="token operator">*</span> x <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span>y2 <span class="token operator">=</span> k <span class="token operator">*</span> x <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span>plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> y2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-imshow"><a href="#2-6-imshow" class="headerlink" title="2.6 imshow"></a>2.6 imshow</h3><img src="/2022/03/13/matplotlib/z=x+y.png" class="" title="z&#x3D;x+y"><p>代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">20</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>    np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>    np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>z <span class="token operator">=</span> x <span class="token operator">+</span> yplt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>z<span class="token punctuation">,</span>cmap<span class="token operator">=</span><span class="token string">"winter"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-等高线图"><a href="#2-7-等高线图" class="headerlink" title="2.7 等高线图"></a>2.7 等高线图</h3><img src="/2022/03/13/matplotlib/%E7%AD%89%E9%AB%98%E7%BA%BF%E5%9B%BE.png" class="" title="等高线图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">20</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>    np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>    np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>z <span class="token operator">=</span> x <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> y <span class="token operator">**</span> <span class="token number">2</span>plt<span class="token punctuation">.</span>contour<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span>cmap<span class="token operator">=</span><span class="token string">"jet"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-箭头图"><a href="#2-8-箭头图" class="headerlink" title="2.8 箭头图"></a>2.8 箭头图</h3><img src="/2022/03/13/matplotlib/%E7%AE%AD%E5%A4%B4%E5%9B%BE.png" class="" title="箭头图"><p>注：x和y指定位置，u和v指定箭头的方向向量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">10</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>    np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>    np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>u <span class="token operator">=</span> xv <span class="token operator">=</span> yplt<span class="token punctuation">.</span>quiver<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-9-evenplot"><a href="#2-9-evenplot" class="headerlink" title="2.9  evenplot"></a>2.9  evenplot</h3><img src="/2022/03/13/matplotlib/evenplot.png" class="" title="evenplot"><p>这是表示x的分布的。分布多的地方密集（可以创建条形码了:D）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">200</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>eventplot<span class="token punctuation">(</span>x<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-10-饼形图"><a href="#2-10-饼形图" class="headerlink" title="2.10 饼形图"></a>2.10 饼形图</h3><img src="/2022/03/13/matplotlib/%E9%A5%BC%E5%BD%A2%E5%9B%BE.png" class="" title="饼形图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">5000</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>x<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-文档中的示例"><a href="#3-文档中的示例" class="headerlink" title="3.文档中的示例"></a>3.文档中的示例</h1><h2 id="1-Lines-bars-and-markers"><a href="#1-Lines-bars-and-markers" class="headerlink" title="1. Lines, bars and markers"></a>1. <a href="https://matplotlib.org/stable/gallery/index.html#lines-bars-and-markers">Lines, bars and markers</a></h2><h3 id="3-1-1-类别变量"><a href="#3-1-1-类别变量" class="headerlink" title="3.1.1 类别变量"></a>3.1.1 类别变量</h3><p>x值和y值都可以是类别变量（如字符串）。此时，x轴或y轴上的tick就不是数字，而是类别变量了：</p><img src="/2022/03/13/matplotlib/%E7%B1%BB%E5%88%AB%E5%8F%98%E9%87%8F%E6%95%88%E6%9E%9C%E5%9B%BE.png" class="" title="类别变量效果图"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'apple'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'lemon'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'lime'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>x <span class="token operator">=</span> data<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>figure<span class="token punctuation">,</span> axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sharey<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>axs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>figure<span class="token punctuation">.</span>suptitle<span class="token punctuation">(</span><span class="token string">"类别变量"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-2-eventplot"><a href="#3-1-2-eventplot" class="headerlink" title="3.1.2 eventplot"></a>3.1.2 eventplot</h3><p>功能是：以每个数据点为x坐标，画一个bar：</p><img src="/2022/03/13/matplotlib/eventplot.png" class="" title="eventplot"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> size<span class="token operator">=</span>size<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>eventplot<span class="token punctuation">(</span>x<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-3-绘制多边形"><a href="#3-1-3-绘制多边形" class="headerlink" title="3.1.3 绘制多边形"></a>3.1.3 绘制多边形</h3><p>效果：</p><img src="/2022/03/13/matplotlib/%E7%BB%98%E5%88%B6%E6%A2%AF%E5%BD%A2.png" class="" title="绘制梯形"><p>这里用到的是<code>fill</code>方法。它接受多边形的顶点坐标：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-4填充"><a href="#3-1-4填充" class="headerlink" title="3.1.4填充"></a>3.1.4填充</h3><p>下图中，在sin(x)&gt;cos(x) 的地方填充绿色；反之填充红色：</p><img src="/2022/03/13/matplotlib/%E6%9D%A1%E4%BB%B6%E5%A1%AB%E5%85%85.png" class="" title="条件填充"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>y1 <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi <span class="token operator">*</span> x<span class="token punctuation">)</span>y2 <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi <span class="token operator">*</span> x<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> where<span class="token operator">=</span>y1 <span class="token operator">></span> y2<span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">"g"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> where<span class="token operator">=</span>y1 <span class="token operator">&lt;</span> y2<span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"sin(x)"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"cos(x)"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sklearn</title>
      <link href="/2022/03/13/sklearn/"/>
      <url>/2022/03/13/sklearn/</url>
      
        <content type="html"><![CDATA[<h2 id="3-1-交叉验证"><a href="#3-1-交叉验证" class="headerlink" title="3.1 交叉验证"></a>3.1 交叉验证</h2><p>交叉验证中，有“几折”就有几次迭代的验证：</p><img src="https://scikit-learn.org/stable/_images/sphx_glr_plot_cv_indices_006.png" class="[class names]" title="[100] [100] " alt="4折交叉验证，图片来自sklearn文档"><p>最直接的实现类是<code>KFold</code>，其随机地将数据划分为n个fold。下面这段代码将数据随机划分为4折，所以迭代了四次。<code>kf.split()</code>方法返回划分后数据下标，第一个参数是训练集的下标；第二个是验证集的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span>  np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> KFoldX <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span>kf <span class="token operator">=</span> KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>train<span class="token punctuation">,</span> test<span class="token punctuation">)</span> <span class="token keyword">in</span> kf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>train<span class="token punctuation">&#125;</span></span><span class="token string">---</span><span class="token interpolation"><span class="token punctuation">&#123;</span>test<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># [ 3  4  5  6  7  8  9 10 11]---[0 1 2]</span><span class="token comment"># [ 0  1  2  6  7  8  9 10 11]---[3 4 5]</span><span class="token comment"># [ 0  1  2  3  4  5  9 10 11]---[6 7 8]</span><span class="token comment"># [0 1 2 3 4 5 6 7 8]---[ 9 10 11]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而<code>StratifiedKFold</code>根据数据集类别的分布划分数据集。其保证每个fold中，各个类别比例和原数据集相同：</p><img src="https://scikit-learn.org/stable/_images/sphx_glr_plot_cv_indices_009.png" class="[class names]" title="[100] [100] " alt="4折分层交叉验证，图片来自sklearn文档"><p>如：下面这段代码将数据分为4折。原数据两个类别比例为3:1，划分出的每个fold也保持这个比例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span>  np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> KFold<span class="token punctuation">,</span> StratifiedKFoldX <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>skf <span class="token operator">=</span> StratifiedKFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span> <span class="token number">15</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token keyword">for</span> train<span class="token punctuation">,</span>test <span class="token keyword">in</span> skf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>train<span class="token punctuation">&#125;</span></span><span class="token string">---</span><span class="token interpolation"><span class="token punctuation">&#123;</span>test<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># [ 4  5  6  7  8  9 10 11 12 13 14 16 17 18 19]---[ 0  1  2  3 15]</span><span class="token comment"># [ 0  1  2  3  8  9 10 11 12 13 14 15 17 18 19]---[ 4  5  6  7 16]</span><span class="token comment"># [ 0  1  2  3  4  5  6  7 12 13 14 15 16 18 19]---[ 8  9 10 11 17]</span><span class="token comment"># [ 0  1  2  3  4  5  6  7  8  9 10 11 15 16 17]---[12 13 14 18 19]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-1数据降维"><a href="#4-1数据降维" class="headerlink" title="4.1数据降维"></a>4.1数据降维</h2><h3 id="1-TSNE"><a href="#1-TSNE" class="headerlink" title="1.TSNE"></a>1.TSNE</h3><p>先构造一个s曲线的数据集（3维），然后用tsne降成2维。最后输出<code>embedding_</code>，即每个数据降维后的表示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> manifoldn_samples <span class="token operator">=</span> <span class="token number">5</span>n_components <span class="token operator">=</span> <span class="token number">2</span>X<span class="token punctuation">,</span> color <span class="token operator">=</span> datasets<span class="token punctuation">.</span>make_s_curve<span class="token punctuation">(</span>n_samples<span class="token punctuation">)</span>tsne <span class="token operator">=</span> manifold<span class="token punctuation">.</span>TSNE<span class="token punctuation">(</span>n_components<span class="token punctuation">)</span>tsne<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tsne<span class="token punctuation">.</span>embedding_<span class="token punctuation">)</span><span class="token comment"># [[-719.20123 -161.4216 ]</span><span class="token comment">#  [-350.07196  471.13382]</span><span class="token comment">#  [ 409.45007  542.26306]</span><span class="token comment">#  [-207.91919 -727.7181 ]</span><span class="token comment">#  [ 306.5553  -202.48648]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> sklearn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch</title>
      <link href="/2022/03/13/pytorch/"/>
      <url>/2022/03/13/pytorch/</url>
      
        <content type="html"><![CDATA[<h2 id="1-bmm"><a href="#1-bmm" class="headerlink" title="1. bmm"></a>1. bmm</h2><p>是定义在batch上的矩阵乘法。在“MOCO”论文中，计算对比损失用到了此方法：</p><img src="/2022/03/13/pytorch/%E8%AE%A1%E7%AE%97%E5%AF%B9%E6%AF%94%E6%8D%9F%E5%A4%B1.png" class="" title="计算对比损失"><p>上面的方法将<code>N,C</code>的矩阵reshape成为<code>N,1,C</code>的张量，然后使用<code>bmm</code>方法计算点积。</p><p>三维矩阵如下面示意：</p><p>其中每个<strong>蓝色</strong>框代表一个二维矩阵，一个<strong>绿色</strong>框代表batch中的一个数据。<code>bmm</code>方法执行时，先将对应的batch<strong>对齐</strong>，然后再进行batch-wise的<strong>二维矩阵乘法</strong>。下面左边这个矩阵是<code>3,2,4</code>的，而Moco中的是<code>N,1,-1</code>的。</p><img src="/2022/03/13/pytorch/%E4%B8%89%E7%BB%B4Tensor.png" class="" title="三维Tensor"><h2 id="2-clip-grad-norm"><a href="#2-clip-grad-norm" class="headerlink" title="2.clip_grad_norm_()"></a>2.<code>clip_grad_norm_()</code></h2><p>作用：归一化参数列表中所有的Tensor的梯度，使其梯度的模为给定的最大值。且返回原梯度的模。</p><p>比如，下面这段代码将<code>x</code>梯度的<code>1范数</code>设置为1，这会使得<code>x</code>的所有梯度之和为1。同样地，这段代码返回原梯度的模。下面例子中返回90，因为<br>$$<br>2+4+6+…+18&#x3D;90<br>$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nn<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>clip_grad_norm_<span class="token punctuation">(</span>parameters<span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>max_norm<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>norm_type<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Parameter<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> Parameter<span class="token punctuation">(</span>data<span class="token operator">=</span>torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>    y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    nn<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>clip_grad_norm_<span class="token punctuation">(</span>parameters<span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>max_norm<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>norm_type<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token comment"># tensor(1.)</span><span class="token comment"># tensor([[0.0000],</span><span class="token comment">#         [0.0222],</span><span class="token comment">#         [0.0444],</span><span class="token comment">#         [0.0667],</span><span class="token comment">#         [0.0889],</span><span class="token comment">#         [0.1111],</span><span class="token comment">#         [0.1333],</span><span class="token comment">#         [0.1556],</span><span class="token comment">#         [0.1778],</span><span class="token comment">#         [0.2000]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-保存和加载模型"><a href="#3-保存和加载模型" class="headerlink" title="3.保存和加载模型"></a>3.保存和加载模型</h2><p><a href="https://pytorch.org/docs/stable/notes/serialization.html#saving-loading-tensors">文档链接</a></p><h3 id="3-1保存张量"><a href="#3-1保存张量" class="headerlink" title="3.1保存张量"></a>3.1保存张量</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">t <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">'tensor.pt'</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'tensor.pt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文档中说，保存的文件最好以’.pt’或者’.pth’为后缀名。</p><h3 id="3-2保存字典"><a href="#3-2保存字典" class="headerlink" title="3.2保存字典"></a>3.2保存字典</h3><p>因为这利用了python的pickle模块做持久化，因此字典、列表等数据结构也可以持久化。</p><h3 id="3-3保存模型"><a href="#3-3保存模型" class="headerlink" title="3.3保存模型"></a>3.3保存模型</h3><p>保存和加载模型时，模型只和<code>state_dict</code>交互。剩下的交给<code>torch.save</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">bn <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> track_running_stats<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>bn<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'bn.pt'</span><span class="token punctuation">)</span>bn_state_dict <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'bn.pt'</span><span class="token punctuation">)</span>new_bn <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> track_running_stats<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>new_bn<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>bn_state_dict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这种方式需要事先创建好模型，然后再加载文件。能不能直接从磁盘上加载出整个模型呢？当然是能的。但是<a href="https://pytorch.org/tutorials/beginner/saving_loading_models.html#save-load-entire-model">文档</a>中说“这么做可能使程序因为各种原因出bug”，因为pickle模块并不会保存保存类的信息。</p><h2 id="4-张量的一些方法"><a href="#4-张量的一些方法" class="headerlink" title="4. 张量的一些方法"></a>4. 张量的一些方法</h2><h3 id="4-1-tolist"><a href="#4-1-tolist" class="headerlink" title="4.1 tolist()"></a>4.1 tolist()</h3><p>作用：返回由张量数据组成的嵌套列表。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># [0, 1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-2-argmax"><a href="#4-2-argmax" class="headerlink" title="4.2 argmax()"></a>4.2 argmax()</h3><p><a href="https://pytorch.org/docs/stable/generated/torch.argmax.html?highlight=argmax#torch.argmax">文档</a>中是这么描述的：</p><p> Returns the indices of the maximum values of a tensor <strong>across</strong> a dimension. </p><p>沿着某个维度，返回其最大值的下标。</p><h2 id="5-数据集相关"><a href="#5-数据集相关" class="headerlink" title="5.数据集相关"></a>5.数据集相关</h2><h3 id="5-1-Subset"><a href="#5-1-Subset" class="headerlink" title="5.1 Subset()"></a>5.1 Subset()</h3><p><a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.Subset">文档链接</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Subset<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> indices<span class="token punctuation">)</span><span class="token comment"># 返回数据集的子数据集</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（存疑。这和直接切片有什么不同？）</p><p>3.16回答：直接切片会出错。如<code>dataset[indices]</code>，会报<code>TypeError: only integer scalar arrays can be converted to a scalar index</code>。因为<code>TUDataset</code>这个类仅支持单个的<code>int</code>类型的索引。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遇到的错误</title>
      <link href="/2022/03/13/%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2022/03/13/%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Python中的错误"><a href="#1-Python中的错误" class="headerlink" title="1. Python中的错误"></a>1. Python中的错误</h1><h2 id="1-1-os模块"><a href="#1-1-os模块" class="headerlink" title="1.1 os模块"></a>1.1 os模块</h2><p>在用<code>os.system()</code>执行<code>cmd</code>命令时，遇到了错误：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">r'hexo n "新博客"'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其输出是这样的：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">Usage: hexo &lt;command&gt;Commands:  help     Get help on a command.  init     Create a new Hexo folder.  version  Display version information.Global Options:  --config  Specify config file instead of using _config.yml  --cwd     Specify the CWD  --debug   Display all verbose messages in the terminal  --draft   Display draft posts  --safe    Disable all plugins and scripts  --silent  Hide output on console<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搜了下，发现是因为命令中有<strong>空格</strong>。所以想在<code>python</code>中执行<code>cmd</code> 命令，还真不容易啊。</p><h2 id="2-dgl随机游走"><a href="#2-dgl随机游走" class="headerlink" title="2.dgl随机游走"></a>2.dgl随机游走</h2><p>GCC: Graph Contrastive Coding for Graph Neural Network Pre-Training 这篇论文中，用到了“重启随机游走算法”。算法内容是：以一个节点为起点，在图中随机游走。每一步都有一定的概率重新<strong>回到</strong>起点。</p><p>但是DGL库中的实现，是以一定的概率<strong>终止</strong>此次游走。如果这个概率很大，那么游走出来的子图几乎都只有一个节点：因为刚开始就直接终止游走了。</p><p>下面是实验：分别以0.8的重启概率和0.0的重启概率，随机游走”COLLAB”数据集。直方图是游走出的1000个子图的节点个数分布图。</p><img src="/2022/03/13/%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/%E9%9A%8F%E6%9C%BA%E6%B8%B8%E8%B5%B0%E5%AD%90%E5%9B%BE%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0%E5%88%86%E5%B8%83%E7%9B%B4%E6%96%B9%E5%9B%BE.png" class="" title="随机游走子图节点个数分布直方图"><p>从图中可以看到，若重启概率为0.8，则80%的子图大小为1，也即是根本就不游走。如果重启概率设置为0，则子图大小正常，都是11（设置的跳数为10，加上起点，正好11）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dgl<span class="token keyword">from</span> dgl<span class="token punctuation">.</span>data <span class="token keyword">import</span> TUDataset<span class="token keyword">from</span> dgl<span class="token punctuation">.</span>sampling <span class="token keyword">import</span> random_walk<span class="token punctuation">,</span> pack_traces<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">class</span> <span class="token class-name">RwrGraphDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>            self<span class="token punctuation">,</span>            dataset<span class="token operator">=</span><span class="token string">"COLLAB"</span><span class="token punctuation">,</span>            rw_hops<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>            restart_prob<span class="token operator">=</span><span class="token number">0.8</span>    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data_folder <span class="token operator">=</span> <span class="token string">r"G:\Project\Python\step-by-step-gcc\dgl_learning\data"</span>        dataset <span class="token operator">=</span> TUDataset<span class="token punctuation">(</span>            name<span class="token operator">=</span>dataset<span class="token punctuation">,</span>            raw_dir<span class="token operator">=</span>self<span class="token punctuation">.</span>data_folder        <span class="token punctuation">)</span>        graphs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> g <span class="token keyword">in</span> dataset<span class="token punctuation">:</span>            graphs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>graph <span class="token operator">=</span> dgl<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>graphs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>rw_hops <span class="token operator">=</span> rw_hops        self<span class="token punctuation">.</span>length <span class="token operator">=</span> self<span class="token punctuation">.</span>graph<span class="token punctuation">.</span>number_of_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>restart_prob <span class="token operator">=</span> restart_prob    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>length    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        trace <span class="token operator">=</span> random_walk<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>graph<span class="token punctuation">,</span>            nodes<span class="token operator">=</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>            length<span class="token operator">=</span>self<span class="token punctuation">.</span>rw_hops<span class="token punctuation">,</span>            restart_prob<span class="token operator">=</span>self<span class="token punctuation">.</span>restart_prob        <span class="token punctuation">)</span>        trace <span class="token operator">=</span> pack_traces<span class="token punctuation">(</span><span class="token operator">*</span>trace<span class="token punctuation">)</span>        trace <span class="token operator">=</span> trace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># print(trace)</span>        <span class="token keyword">return</span> dgl<span class="token punctuation">.</span>node_subgraph<span class="token punctuation">(</span>self<span class="token punctuation">.</span>graph<span class="token punctuation">,</span> trace<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    dataset <span class="token operator">=</span> RwrGraphDataset<span class="token punctuation">(</span><span class="token punctuation">)</span>    sub_graphs_8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    N <span class="token operator">=</span> <span class="token number">1000</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> d <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> idx <span class="token operator">>=</span> N<span class="token punctuation">:</span>            <span class="token keyword">break</span>        sub_graphs_8<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">.</span>number_of_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dataset<span class="token punctuation">.</span>restart_prob <span class="token operator">=</span> <span class="token number">0</span>    sub_graphs_0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> d <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> idx <span class="token operator">>=</span> N<span class="token punctuation">:</span>            <span class="token keyword">break</span>        sub_graphs_0<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">.</span>number_of_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sub_graphs_0<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sub_graphs_8<span class="token punctuation">)</span>    fig<span class="token punctuation">,</span>axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hist<span class="token punctuation">(</span>sub_graphs_0<span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"restart_prob = 0"</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hist<span class="token punctuation">(</span>sub_graphs_8<span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"restart_prob = 0.8"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-matplotlib"><a href="#3-matplotlib" class="headerlink" title="3.matplotlib"></a>3.matplotlib</h2><h3 id="1-显示中文"><a href="#1-显示中文" class="headerlink" title="1. 显示中文"></a>1. 显示中文</h3><p>如果有中文，需要设置这两句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>  plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>否则会报以下的错，且显示不出来中文：</p><p><img src="C:\Users\LLKK\AppData\Roaming\Typora\typora-user-images\1647232686477.png" alt="显示中文报错"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dgl学习记录</title>
      <link href="/2022/03/13/dgl%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/03/13/dgl%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-图"><a href="#第1章-图" class="headerlink" title="第1章 图"></a>第1章 图</h1><p><strong>本文是<a href="https://docs.dgl.ai/en/0.8.x/guide_cn/">dgl官方文档阅读记录</a>。</strong></p><h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h2><h2 id="1-2-图、节点和边"><a href="#1-2-图、节点和边" class="headerlink" title="1.2 图、节点和边"></a>1.2 图、节点和边</h2><img src="/2022/03/13/dgl%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E7%9B%AE%E6%A0%87%E5%9B%BE.png" class="" title="目标图"><p>如果想创建一个上面这样的图，需要创建两个表示边的<code>tensor</code>，然后调用<code>dgl.graph()</code>方法。这两个tensor分别是源节点和目标节点的ID：<a href="https://docs.dgl.ai/en/0.8.x/guide_cn/graph-graphs-nodes-edges.html">参考官方文档</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> dglu <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>v <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>g <span class="token operator">=</span> dgl<span class="token punctuation">.</span>graph<span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-节点和边的特征"><a href="#1-3-节点和边的特征" class="headerlink" title="1.3 节点和边的特征"></a>1.3 节点和边的特征</h2><p>可以通过<code>DGLGraph</code>的<code>ndata</code>和<code>edata</code>接口访问图的具名特征：（假设图<code>g</code>已经创建）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">g<span class="token punctuation">.</span>ndata<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span><span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>g<span class="token punctuation">.</span>num_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>g<span class="token punctuation">.</span>edata<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>g<span class="token punctuation">.</span>num_edges<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h2><h2 id="1-5-异构图"><a href="#1-5-异构图" class="headerlink" title="1.5     异构图"></a>1.5     异构图</h2><p>若一个图中，有不同类型的边和节点，那么这个图就是异构图。在<code>dgl</code>中，用<code>DGLHeteroGraph</code>表示一个异构图。用<code>dgl.heterograph()</code>方法可以创建异构图，其第一个参数是一个字典。字典的键是元组，用以表示<code>节点类型-边类型-节点类型</code>的连接类型；字典的值是表示两个边的<code>tensor</code>（和同构图一样）。如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> dglu <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>v <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>g <span class="token operator">=</span> dgl<span class="token punctuation">.</span>heterograph<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token string">"drug"</span><span class="token punctuation">,</span> <span class="token string">"interacts"</span><span class="token punctuation">,</span> <span class="token string">"drug"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">"gene"</span><span class="token punctuation">,</span> <span class="token string">"interacts"</span><span class="token punctuation">,</span> <span class="token string">"drug"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># &lt;class 'dgl.heterograph.DGLHeteroGraph'></span><span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token comment"># Graph(num_nodes=&#123;'drug': 4, 'gene': 2&#125;,</span><span class="token comment">#       num_edges=&#123;('drug', 'interacts', 'drug'): 4, ('gene', 'interacts', 'drug'): 4&#125;,</span><span class="token comment">#       metagraph=[('drug', 'drug', 'interacts'), ('gene', 'drug', 'interacts')])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第2章：消息传递范式"><a href="#第2章：消息传递范式" class="headerlink" title="第2章：消息传递范式"></a>第2章：消息传递范式</h1><h2 id="2-1-内置函数和消息传递API"><a href="#2-1-内置函数和消息传递API" class="headerlink" title="2.1 内置函数和消息传递API"></a>2.1 内置函数和消息传递API</h2><h3 id="2-1-1-消息的生成"><a href="#2-1-1-消息的生成" class="headerlink" title="2.1.1 消息的生成"></a>2.1.1 消息的生成</h3><p><strong>message</strong>是边的特征。即，在图的<code>edata</code>属性中。根据据源节点、目标节点和边这三者的特征可以计算出<strong>message</strong>。比如，下面这个函数指定计算<code>g.edata[&quot;he&quot;]</code>的方式，具体为：</p><p><code>g.edata[&quot;he&quot;]</code> <code>=</code>源节点的x特征<code>+</code>目标节点的y特征：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">message_fn</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"he"</span><span class="token punctuation">:</span> edges<span class="token punctuation">.</span>src<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">+</span> edges<span class="token punctuation">.</span>dst<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个函数的参数<code>edges</code>有三个属性<code>src,dst,data</code>，分别用来访问源节点、目标节点和边的特征 。定义好传播函数后，就可以在图上传播了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">g<span class="token punctuation">.</span>apply_edges<span class="token punctuation">(</span>message_fn<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dgl<span class="token keyword">import</span> torchu <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>v <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>g <span class="token operator">=</span> dgl<span class="token punctuation">.</span>graph<span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>g<span class="token punctuation">.</span>ndata<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>g<span class="token punctuation">.</span>num_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>g<span class="token punctuation">.</span>ndata<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>g<span class="token punctuation">.</span>num_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">message_fn</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"he"</span><span class="token punctuation">:</span> edges<span class="token punctuation">.</span>src<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">+</span> edges<span class="token punctuation">.</span>dst<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>g<span class="token punctuation">.</span>apply_edges<span class="token punctuation">(</span>message_fn<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>edata<span class="token punctuation">)</span><span class="token comment"># &#123;'he': tensor([[3., 3., 3.],</span><span class="token comment">#         [3., 3., 3.],</span><span class="token comment">#         [3., 3., 3.],</span><span class="token comment">#         [3., 3., 3.]])&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-2-内置函数"><a href="#2-1-2-内置函数" class="headerlink" title="2.1.2 内置函数"></a>2.1.2 内置函数</h3><p>类似上面的<code>message_fn()</code>，框架已经提供了很多消息函数和聚合函数。</p><p>比如：将源节点<code>（u）</code>的特征<code>fn</code>与边特征<code>a</code>相乘，得到消息<code>m</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dgl<span class="token punctuation">.</span>function <span class="token keyword">as</span> fnfn<span class="token punctuation">.</span>u_mul_e<span class="token punctuation">(</span><span class="token string">'ft'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后对所有<code>m</code>消息求和，得到新的节点特征<code>ft</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fn<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'ft'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_all_example</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 在graph.ndata['ft']中存储结果</span>    graph<span class="token punctuation">.</span>update_all<span class="token punctuation">(</span>fn<span class="token punctuation">.</span>u_mul_e<span class="token punctuation">(</span><span class="token string">'ft'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     fn<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'ft'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 在update_all外调用更新函数</span>    final_ft <span class="token operator">=</span> graph<span class="token punctuation">.</span>ndata<span class="token punctuation">[</span><span class="token string">'ft'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span>    <span class="token keyword">return</span> final_ft<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数学公式为：<img src="/2022/03/13/dgl%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E7%A4%BA%E4%BE%8B.png" class="" title="消息传递示例"></p><h1 id="7-零散遇到的"><a href="#7-零散遇到的" class="headerlink" title="7.零散遇到的"></a>7.零散遇到的</h1><h2 id="1-batch"><a href="#1-batch" class="headerlink" title="1. batch"></a>1. batch</h2><p>作用：将多个图放到一起，组成一个非连通图。</p><p>如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dgl<span class="token keyword">from</span> networkx <span class="token keyword">import</span> draw<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltg1 <span class="token operator">=</span> dgl<span class="token punctuation">.</span>rand_graph<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>g2 <span class="token operator">=</span> dgl<span class="token punctuation">.</span>rand_graph<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>batch <span class="token operator">=</span> dgl<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token punctuation">[</span>g1<span class="token punctuation">,</span> g2<span class="token punctuation">]</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>draw<span class="token punctuation">(</span>dgl<span class="token punctuation">.</span>to_networkx<span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">,</span> with_labels<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：</p><img src="/2022/03/13/dgl%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/batch%E5%9B%BE.png" class="" title="batch图"><h2 id="2-带有feature的batch"><a href="#2-带有feature的batch" class="headerlink" title="2.带有feature的batch"></a>2.带有feature的batch</h2><p>当每个图都有相同名字的特征时（且维度也相同），batch生成的图也有特征，其特征是单个图特征的拼接：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> dglg1 <span class="token operator">=</span> dgl<span class="token punctuation">.</span>rand_graph<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>g2 <span class="token operator">=</span> dgl<span class="token punctuation">.</span>rand_graph<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>g1<span class="token punctuation">.</span>ndata<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>g2<span class="token punctuation">.</span>ndata<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>batch <span class="token operator">=</span> dgl<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token punctuation">[</span>g1<span class="token punctuation">,</span> g2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>batch<span class="token punctuation">.</span>ndata<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># tensor([[-1.3722, -0.6952, -0.9552],</span><span class="token comment">#         [-0.4174,  0.7786,  0.1051],</span><span class="token comment">#         [-0.4641, -1.2873, -0.6287],</span><span class="token comment">#         [-1.3749,  0.5652,  0.2486],</span><span class="token comment">#         [-0.2142, -1.6658,  1.6447],</span><span class="token comment">#         [-1.6067,  0.7329,  0.8158],</span><span class="token comment">#         [-0.6917,  2.0294,  1.9268],</span><span class="token comment">#         [-0.7073,  0.5287,  0.0807],</span><span class="token comment">#         [-1.0396,  0.0716,  0.2079],</span><span class="token comment">#         [ 0.5207,  1.1675, -1.0380],</span><span class="token comment">#         [-0.5979,  0.0495,  1.1729],</span><span class="token comment">#         [ 0.3957, -0.4686,  0.2052],</span><span class="token comment">#         [-0.1811,  2.1922,  0.5614],</span><span class="token comment">#         [-0.5860, -0.6855, -1.3646],</span><span class="token comment">#         [-0.5922,  0.2640, -1.0135],</span><span class="token comment">#         [ 0.9401,  0.2334,  1.8972],</span><span class="token comment">#         [ 0.7774,  2.1941, -0.6404],</span><span class="token comment">#         [ 1.4989,  0.6928,  0.3352],</span><span class="token comment">#         [ 0.2398,  1.0007, -0.7070],</span><span class="token comment">#         [ 0.1693, -1.3967, -1.0233]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，完全可以将一个batch当成一个图。</p><h2 id="3-AvgPooling"><a href="#3-AvgPooling" class="headerlink" title="3.AvgPooling"></a>3.AvgPooling</h2><p>当一个图被池化，那么输出的是一个<code>(1,N)</code>的向量，表示这个图。</p><p>若这个图是batch生成的，那么这个batch里面有几个图，就生成几个图的向量。即：输出<code>(n_batch,N)</code>形状的Tensor。</p><p>下面例子中，batch中有两个图。每个节点的x特征维度为3。因此池化输出的结果是<code>(2,3)</code>的Tensor：</p><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>forward方法</span><a href="https://docs.dgl.ai/generated/dgl.nn.pytorch.glob.AvgPooling.html?highlight">link</a></div><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> dgl<span class="token keyword">from</span> dgl<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>pytorch <span class="token keyword">import</span> AvgPoolingg1 <span class="token operator">=</span> dgl<span class="token punctuation">.</span>rand_graph<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>g2 <span class="token operator">=</span> dgl<span class="token punctuation">.</span>rand_graph<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>g1<span class="token punctuation">.</span>ndata<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>g2<span class="token punctuation">.</span>ndata<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>batch <span class="token operator">=</span> dgl<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token punctuation">[</span>g1<span class="token punctuation">,</span> g2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>AvgPooling<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>batch<span class="token punctuation">,</span> batch<span class="token punctuation">.</span>ndata<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># tensor([[ 0.4438,  0.4382, -0.3256],</span><span class="token comment">#         [-0.2316,  0.1083, -0.1091]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-save-graphs"><a href="#4-save-graphs" class="headerlink" title="4.save_graphs"></a>4.save_graphs</h2><p>可以将图持久化到磁盘：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">graphs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>graph_sizes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_graphs<span class="token punctuation">)</span><span class="token punctuation">:</span>    graph <span class="token operator">=</span> dgl<span class="token punctuation">.</span>rand_graph<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>    graphs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>graph<span class="token punctuation">)</span>    labels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span>    graph_size <span class="token operator">=</span> graph<span class="token punctuation">.</span>number_of_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span>    graph_sizes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>graph_size<span class="token punctuation">)</span>labels <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"graph_labels"</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"graph_sizes"</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>graph_sizes<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>dgl<span class="token punctuation">.</span>save_graphs<span class="token punctuation">(</span><span class="token string">"small.bin"</span><span class="token punctuation">,</span> graphs<span class="token punctuation">,</span> labels<span class="token operator">=</span>labels<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存储图的同时，还存储了<code>labels</code>，这个<code>labels</code>中包含与保存的图相关的标签信息。比如上面这段代码，保存了图的标签（键是<code>graph_labels</code>）和图的大小（键是<code>graph_sizes</code>）。这些数据又能被<code>dgl.load_labels()</code>单独读取出来：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">filename<span class="token operator">=</span><span class="token string">"small.bin"</span>graph_sizes <span class="token operator">=</span> load_labels<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"graph_sizes"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-卷积层"><a href="#5-卷积层" class="headerlink" title="5.卷积层"></a>5.卷积层</h2><p><code>GINConv()</code>演示：</p><p>即，输入是一个图和其特征，输出是经过一层卷积后的节点的特征。参见<a href="https://docs.dgl.ai/_modules/dgl/nn/pytorch/conv/ginconv.html#GINConv.forward">文档。</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">input_dim <span class="token operator">=</span> <span class="token number">3</span>n <span class="token operator">=</span> <span class="token number">5</span>g <span class="token operator">=</span> dgl<span class="token punctuation">.</span>rand_graph<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>h <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>n<span class="token punctuation">,</span> input_dim<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>GINConv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># tensor([[4., 4., 4.],</span><span class="token comment">#         [4., 4., 4.],</span><span class="token comment">#         [5., 5., 5.],</span><span class="token comment">#         [6., 6., 6.],</span><span class="token comment">#         [6., 6., 6.]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-TUDataset"><a href="#6-TUDataset" class="headerlink" title="6.TUDataset"></a>6.TUDataset</h2><p>这是在“<a href="https://docs.dgl.ai/api/python/dgl.data.html#graph-prediction-datasets">图预测</a>”数据集里的。这个类的实例的<code>__getitem__</code>方法返回一个元组：<code>(dgl.Graph, Tensor)</code>，其中前者是图，后者是图对应的标签。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dataset <span class="token operator">=</span> TUDataset<span class="token punctuation">(</span><span class="token string">"enzymes"</span><span class="token punctuation">,</span>raw_dir<span class="token operator">=</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token keyword">for</span> g<span class="token punctuation">,</span>label <span class="token keyword">in</span> dataset<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span>    <span class="token keyword">break</span><span class="token comment"># Graph(num_nodes=37, num_edges=168,</span><span class="token comment">#       ndata_schemes=&#123;'node_labels': Scheme(shape=(1,), dtype=torch.int64), 'node_attr': Scheme(shape=(18,), dtype=torch.float64), '_ID': Scheme(shape=(), dtype=torch.int64)&#125;</span><span class="token comment">#       edata_schemes=&#123;'_ID': Scheme(shape=(), dtype=torch.int64)&#125;)</span><span class="token comment"># tensor([5], dtype=torch.int32)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 图神经网络 </tag>
            
            <tag> dgl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python常用模块</title>
      <link href="/2022/03/13/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
      <url>/2022/03/13/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="1-shutil"><a href="#1-shutil" class="headerlink" title="1. shutil"></a>1. shutil</h1><h2 id="1-1-shutil-copyfile-src-des"><a href="#1-1-shutil-copyfile-src-des" class="headerlink" title="1.1 shutil.copyfile(src,des)"></a>1.1 <code>shutil.copyfile(src,des)</code></h2><p>   从<code>src</code>拷贝文件到<code>des</code>。且<code>des</code>目录里不能有未创建的文件夹。关键部分源码：</p>   <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#....</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fsrc<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fdst<span class="token punctuation">:</span>   <span class="token comment">#....</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   可以看到，这函数调用<code>open()</code>方法，打开了两个文件，完成复制。</p><h2 id="1-2-shutil-copytree-src-dst-dirs-exist-ok-False"><a href="#1-2-shutil-copytree-src-dst-dirs-exist-ok-False" class="headerlink" title="1.2 shutil.copytree(src, dst,dirs_exist_ok=False)"></a>1.2 <code>shutil.copytree(src, dst,dirs_exist_ok=False)</code></h2><p>   递归式拷贝<code>src</code>文件树到<code>dst</code>中。若<code>dirs_exist_ok=True</code>，那么如果<code>dst</code>中已经存在某些文件，则会跳过复制而不报错。反之亦然。</p><h2 id="1-3-shutil-make-archive-quot-archive-quot-quot-zip-quot-quot-quot"><a href="#1-3-shutil-make-archive-quot-archive-quot-quot-zip-quot-quot-quot" class="headerlink" title="1.3 shutil.make_archive(&quot;archive&quot;,&quot;zip&quot;,&quot;.&quot;)"></a>1.3 <code>shutil.make_archive(&quot;archive&quot;,&quot;zip&quot;,&quot;.&quot;)</code></h2><p>   这里直接上例子了。上面这句作用是将当前目录下文件打包成压缩包，并返回压缩包的全路径。</p><h1 id="2-collections"><a href="#2-collections" class="headerlink" title="2.collections"></a>2.collections</h1><h2 id="2-1-namedtuple"><a href="#2-1-namedtuple" class="headerlink" title="2.1 namedtuple"></a>2.1 <code>namedtuple</code></h2><p><code>namedtuple()</code>创建一个具名元组，它是元组的子类。类似于<code>Java</code>中的<code>POJO</code>，其只有一些具有意义的字段，只是为了存储信息。从“键值对”的角度看，它也类似字典。<br>例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">User <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tom <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment"># print(tom.name)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="3-内置部分"><a href="#3-内置部分" class="headerlink" title="3.内置部分"></a>3.内置部分</h1><h2 id="3-1-exec"><a href="#3-1-exec" class="headerlink" title="3.1 exec()"></a>3.1 exec()</h2><p>这是一个内置函数。是前天看<code>namedtuple</code>源码时发现的。作用是执行一段Python语句，这段语句以字符串形式传进这个函数。如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>    <span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token string">"d"</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> key <span class="token keyword">in</span> d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f" print(d['</span><span class="token interpolation"><span class="token punctuation">&#123;</span>key<span class="token punctuation">&#125;</span></span><span class="token string">']) "</span></span>    <span class="token keyword">exec</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-assert"><a href="#3-2-assert" class="headerlink" title="3.2 assert"></a>3.2 assert</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">assert</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"n必须小于3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2022/03/13/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/assert%E9%94%99%E8%AF%AF%E7%9A%84%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF.png" class="" title="assert错误的报错信息"><h2 id="3-3-class"><a href="#3-3-class" class="headerlink" title="3.3 __class__"></a>3.3 __class__</h2><p>对象的<code>__class__</code>属性返回对象所属的类。返回值类型为<code>type</code>类型。<code>type</code>类型有个<code>__name__</code>字段，指示这个类的名字：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>b  <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token comment"># &lt;class '__main__.B'></span><span class="token comment"># &lt;class 'type'></span><span class="token comment"># B</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-os-path"><a href="#4-os-path" class="headerlink" title="4. os.path"></a>4. os.path</h1><h2 id="4-1-isfile"><a href="#4-1-isfile" class="headerlink" title="4.1 isfile()"></a>4.1 <code>isfile()</code></h2><p>签名为：<code>os.path.isfile(path)</code>，功能为判断<code>path</code>是否为现有的文件（文件夹不可以）。如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token operator">=</span><span class="token string">"."</span>res <span class="token operator">=</span> isfile<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment"># res 为False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-2isdir"><a href="#4-2isdir" class="headerlink" title="4.2isdir()"></a>4.2<code>isdir()</code></h2><p>与上面相似，这是判断<code>path</code>是否为现有文件夹。</p><h2 id="4-3-exists"><a href="#4-3-exists" class="headerlink" title="4.3 exists()"></a>4.3 <code>exists()</code></h2><p> <code>os.path.``exists</code>(<em>path</em>) </p><p>判断路径是否存在</p><h1 id="5-psutil"><a href="#5-psutil" class="headerlink" title="5.psutil"></a>5.psutil</h1><h3 id="5-1-virtual-memory"><a href="#5-1-virtual-memory" class="headerlink" title="5.1 virtual_memory()"></a>5.1 <code>virtual_memory()</code></h3><p>这函数返回内存的使用情况。文档中说返回一个<code>namedtuple</code>，但是打印的类型并不是。即使如此，返回的对象仍然跟<code>namedtupl</code>几乎一样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> psutilres <span class="token operator">=</span> psutil<span class="token punctuation">.</span>virtual_memory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># svmem(total=17038905344, available=6597857280, percent=61.3, used=10441048064, free=6597857280)</span><span class="token comment"># &lt;class 'psutil._pswindows.svmem'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>意为：总共16G内存，可用6.5G，已用61,3%，已使用10G，可用6.6G。</p><h1 id="6-tqdm"><a href="#6-tqdm" class="headerlink" title="6.tqdm"></a>6.tqdm</h1><p>进度条工具。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> trangedataset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token keyword">for</span> i <span class="token keyword">in</span> trange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/03/13/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/%E8%BF%9B%E5%BA%A6%E6%9D%A1.png" class="" title="进度条"><p>给个简单的进度统计。</p><h1 id="7-itemgetter"><a href="#7-itemgetter" class="headerlink" title="7. itemgetter"></a>7. itemgetter</h1><p>返回一个callable对象（即一个函数），函数作用是返回可迭代对象的第N个条目：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> operatorf <span class="token operator">=</span> operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>g <span class="token operator">=</span> operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 0</span><span class="token comment"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上例中，<code>f(x)</code>相当于<code>x[0]</code>。其实也相当于一个<code>lambda x:x[0]</code>。</p><h1 id="8-字典类"><a href="#8-字典类" class="headerlink" title="8.字典类"></a>8.字典类</h1><h2 id="8-1-update方法"><a href="#8-1-update方法" class="headerlink" title="8.1 update方法"></a>8.1 update方法</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">    d <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"tom"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">&#125;</span>    d2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>        <span class="token string">"sex"</span><span class="token punctuation">:</span> <span class="token string">"male"</span>    <span class="token punctuation">&#125;</span>    d<span class="token punctuation">.</span>update<span class="token punctuation">(</span>d2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment"># &#123;'name': 'jack', 'age': 20, 'sex': 'male'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>顾名思义，这函数根据参数中的字典数据，更新自己的数据。如果存在某个相同的键，则更新值；否则添加这个键。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 文件处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PySide2学习记录1</title>
      <link href="/2022/03/12/PySide2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/"/>
      <url>/2022/03/12/PySide2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</url>
      
        <content type="html"><![CDATA[<h1 id="简单实现：打开一个窗口"><a href="#简单实现：打开一个窗口" class="headerlink" title="简单实现：打开一个窗口"></a>简单实现：打开一个窗口</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QMainWindowapp <span class="token operator">=</span> QApplication<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>window <span class="token operator">=</span> QMainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码的效果为：</p><img src="/2022/03/12/PySide2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/1.png" class="" title="上述代码执行效果"><p>其中，<code>app</code>为控整个GUI程序的“管理者”。在初始化任何窗体之前，都应该先初始它。且它有一个<code>exec_()</code>方法。这个方法是继承自父类的，功能是进入GUI的事件处理循环。如果没有这句，窗口会一闪而过。继承关系如下：</p><img src="/2022/03/12/PySide2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/QApplication.png" class="" title="继承图。exec_()方法继承自其直接父类"><h1 id="按钮、slot、signal"><a href="#按钮、slot、signal" class="headerlink" title="按钮、slot、signal"></a>按钮、slot、signal</h1><p>控件被操作之后，会发送一个<strong>signal</strong>，可以指定一个函数去处理这个<strong>signal</strong>。这个函数大约就是<strong>slot</strong>了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QMainWindow<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QMessageBox<span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 初始化窗口</span>        self<span class="token punctuation">.</span>window <span class="token operator">=</span> QMainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 在window上放置一个button</span>        self<span class="token punctuation">.</span>button <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"提交"</span><span class="token punctuation">,</span>parent<span class="token operator">=</span>self<span class="token punctuation">.</span>window<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button_handler<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">button_handler</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 按钮点积信号的处理函数(slot)</span>        QMessageBox<span class="token punctuation">.</span>about<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>window<span class="token punctuation">,</span>            <span class="token string">"按钮提交反馈"</span><span class="token punctuation">,</span>            <span class="token string">"您刚才点击了按钮！"</span>        <span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>    https<span class="token punctuation">:</span><span class="token operator">//</span>doc<span class="token punctuation">.</span>qt<span class="token punctuation">.</span>io<span class="token operator">/</span>qt<span class="token operator">-</span><span class="token number">6</span><span class="token operator">/</span>qabstractbutton<span class="token punctuation">.</span>html<span class="token comment">#signals</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的执行结果为：</p><img src="/2022/03/12/PySide2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/button.png" class="" title="按钮点击事件、弹出消息框"><p><a href="https://doc.qt.io/qt-6/qabstractbutton.html#signals">这里有</a><code>QAbstractButton</code>的全部<strong>signal</strong>。</p><h1 id="使用Qt-Designer"><a href="#使用Qt-Designer" class="headerlink" title="使用Qt Designer"></a>使用Qt Designer</h1><p>手动调整控件的位置无疑是枯燥的。Qt库提供了一个工具，叫designer，可以用拖拽的方式先调整好GUI各个控件的大体位置。这个软件被安装在了虚拟环境的Scripts目录下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">D:\software\Anaconda\envs\tf2\Scripts\pyside2-designer.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用这个软件设计好界面后，将*.ui文件保存，然后在代码中加载它：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtUiTools <span class="token keyword">import</span> QUiLoader<span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 加载ui配置文件</span>        self<span class="token punctuation">.</span>ui <span class="token operator">=</span> QUiLoader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"ui/postman.ui"</span><span class="token punctuation">)</span>        <span class="token comment"># 显示窗体</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git设置</title>
      <link href="/2022/03/12/git%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/03/12/git%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="git-clone下载太慢"><a href="#git-clone下载太慢" class="headerlink" title="git clone下载太慢"></a>git clone下载太慢</h1><p>可以配置git 使用socket5 代理 ，如使用SSR（地址为socks5h:&#x2F;&#x2F;127.0.0.1:1080）：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global http.proxy &#39;socks5h:&#x2F;&#x2F;127.0.0.1:1080&#39;git config --global https.proxy &#39;socks5h:&#x2F;&#x2F;127.0.0.1:1080&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="git-配置-ssh秘钥"><a href="#git-配置-ssh秘钥" class="headerlink" title="git 配置 ssh秘钥"></a>git 配置 ssh秘钥</h1><p><a href="https://gitee.com/help/articles/4181">Gitee上</a>有生成秘钥的教程。</p><p><strong>步骤：</strong></p><p>先执行生成指令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh-keygen -t ed25519 -C &quot;anchor2019@outlook.com&quot;  # Generating public&#x2F;private ed25519 key pair...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行后，会在<code>~/.ssh/</code>目录下生成以下两个文件：</p><img src="/2022/03/12/git%E8%AE%BE%E7%BD%AE/%E7%A7%98%E9%92%A5%E6%96%87%E4%BB%B6.png" class="" title="秘钥文件"><p>可以使用<code>cat</code>执行查看公钥，并将公钥信息填在Gitee设置中：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat ~&#x2F;.ssh&#x2F;id_ed25519.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加后，可以测试是否成功：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh -T git@gitee.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 翻墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powershell</title>
      <link href="/2022/03/12/powershell/"/>
      <url>/2022/03/12/powershell/</url>
      
        <content type="html"><![CDATA[<h1 id="一行代码执行多条命令"><a href="#一行代码执行多条命令" class="headerlink" title="一行代码执行多条命令"></a>一行代码执行多条命令</h1><p>用<strong>分号</strong>实现。</p><p>如，重启hexo服务器：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">hexo clean <span class="token punctuation">;</span> hexo g <span class="token punctuation">;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/2022/03/12/Hexo/"/>
      <url>/2022/03/12/Hexo/</url>
      
        <content type="html"><![CDATA[<p>记录创建博客时遇到的内容</p><h2 id="1-hexo相关"><a href="#1-hexo相关" class="headerlink" title="1.hexo相关"></a>1.hexo相关</h2><h3 id="1-创建新文章"><a href="#1-创建新文章" class="headerlink" title="1. 创建新文章"></a>1. 创建新文章</h3>   <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo n &quot;作品名&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-嵌入网络图片"><a href="#2-嵌入网络图片" class="headerlink" title="2.嵌入网络图片"></a>2.嵌入网络图片</h3><p><code>&#123;% img [class names] https://scikit-learn.org/stable/_images/sphx_glr_plot_cv_indices_006.png [100] [100] '"4折交叉验证，图片来自sklearn文档" "4折交叉验证"' %&#125;</code></p><h2 id="2-一些参考文档"><a href="#2-一些参考文档" class="headerlink" title="2.一些参考文档"></a>2.一些参考文档</h2><h3 id="1-hexo文档"><a href="#1-hexo文档" class="headerlink" title="1. hexo文档"></a>1. <a href="https://hexo.io/zh-cn/docs/writing">hexo文档</a></h3><h3 id="2-stun主题的文档"><a href="#2-stun主题的文档" class="headerlink" title="2. stun主题的文档"></a>2. <a href="https://theme-stun.github.io/docs/zh-CN/guide/primary.html#%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95">stun主题的文档</a></h3><p>从这篇文档中，了解了hexo的文件目录是如何处理的。</p><h2 id="3-hexo-theme-matery主题相关"><a href="#3-hexo-theme-matery主题相关" class="headerlink" title="3.hexo-theme-matery主题相关"></a>3.hexo-theme-matery主题相关</h2><h3 id="1-设置公式"><a href="#1-设置公式" class="headerlink" title="1.设置公式"></a>1.设置公式</h3><p>需要开启mathja配置；然后在带有公式的文档的Front-matter中再加上<code>mathjax: true</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>介绍</title>
      <link href="/2022/03/12/%E6%80%BB%E8%BF%B0%E6%96%87%E7%AB%A0/"/>
      <url>/2022/03/12/%E6%80%BB%E8%BF%B0%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来访！祝你每天都有个好心情"><a href="#欢迎来访！祝你每天都有个好心情" class="headerlink" title="欢迎来访！祝你每天都有个好心情~"></a>欢迎来访！祝你每天都有个好心情~</h1><blockquote><p>引言测试</p><footer><strong>传习录, 王阳明</strong><cite><a href="https://hexo.io/zh-cn/docs/tag-plugins">hexo.io/zh-cn/docs/tag-plugins</a></cite></footer></blockquote><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>BATCHNORM2D</span><a href="https://pytorch.org/docs/stable/generated/torch.nn.BatchNorm2d.html?highlight=batchnorm2d#torch.nn.BatchNorm2d">BATCHNORM2D</a></div><code class="language-python"><span class="token comment"># With Learnable Parameters</span>m <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment"># Without Learnable Parameters</span>m <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> affine<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span>output <span class="token operator">=</span> m<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>名字title</span><a href="https://pytorch.org/docs/stable/generated/torch.nn.BatchNorm2d.html?highlight">link</a></div><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
